{
  ".schema_version": "1",
  "name": "newrelic",
  "type": "provider",
  "version": "v2.0.0",
  "provider": {
    "account_id": {
      "Type": "Int",
      "Required": true,
      "DefaultFunc": "ENV(NEW_RELIC_ACCOUNT_ID)"
    },
    "admin_api_key": {
      "Type": "String",
      "Optional": true,
      "DefaultFunc": "ENV(NEW_RELIC_ADMIN_API_KEY)"
    },
    "api_key": {
      "Type": "String",
      "Optional": true,
      "DefaultFunc": "ENV(NEW_RELIC_API_KEY)"
    },
    "api_url": {
      "Type": "String",
      "Optional": true,
      "DefaultFunc": "ENV(NEW_RELIC_API_URL)",
      "Deprecated": "New Relic internal use only. API URLs are now configured based on the configured region."
    },
    "cacert_file": {
      "Type": "String",
      "Optional": true,
      "DefaultFunc": "ENV(NEW_RELIC_API_CACERT)"
    },
    "infrastructure_api_url": {
      "Type": "String",
      "Optional": true,
      "DefaultFunc": "ENV(NEW_RELIC_INFRASTRUCTURE_API_URL)",
      "Deprecated": "New Relic internal use only. API URLs are now configured based on the configured region."
    },
    "insecure_skip_verify": {
      "Type": "Bool",
      "Optional": true,
      "DefaultFunc": "ENV(NEW_RELIC_API_SKIP_VERIFY)"
    },
    "insights_insert_key": {
      "Type": "String",
      "Optional": true,
      "DefaultFunc": "ENV(NEW_RELIC_INSIGHTS_INSERT_KEY)"
    },
    "insights_insert_url": {
      "Type": "String",
      "Optional": true,
      "DefaultFunc": "ENV(NEW_RELIC_INSIGHTS_INSERT_URL)"
    },
    "insights_query_key": {
      "Type": "String",
      "Optional": true,
      "DefaultFunc": "ENV(NEW_RELIC_INSIGHTS_QUERY_KEY)"
    },
    "insights_query_url": {
      "Type": "String",
      "Optional": true,
      "DefaultFunc": "ENV(NEW_RELIC_INSIGHTS_QUERY_URL)"
    },
    "nerdgraph_api_url": {
      "Type": "String",
      "Optional": true,
      "DefaultFunc": "ENV(NEW_RELIC_NERDGRAPH_API_URL)",
      "Deprecated": "New Relic internal use only. API URLs are now configured based on the configured region."
    },
    "region": {
      "Type": "String",
      "Required": true,
      "Description": "The data center for which your New Relic account is configured. Only one region per provider block is permitted.",
      "DefaultFunc": "ENV(NEW_RELIC_REGION)"
    },
    "synthetics_api_url": {
      "Type": "String",
      "Optional": true,
      "DefaultFunc": "ENV(NEW_RELIC_SYNTHETICS_API_URL)",
      "Deprecated": "New Relic internal use only. API URLs are now configured based on the configured region."
    }
  },
  "resources": {
    "newrelic_alert_channel": {
      "config": {
        "Type": "List",
        "Optional": true,
        "Description": "The configuration block for the alert channel.",
        "MaxItems": 1,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "api_key": {
              "Type": "String",
              "Optional": true,
              "Description": "The API key for integrating with OpsGenie."
            },
            "auth_password": {
              "Type": "String",
              "Optional": true,
              "Description": "Specifies an authentication password for use with a channel. Supported by the webhook channel type."
            },
            "auth_type": {
              "Type": "String",
              "Optional": true,
              "Description": "Specifies an authentication method for use with a channel. Supported by the webhook channel type. Only HTTP basic authentication is currently supported via the value BASIC."
            },
            "auth_username": {
              "Type": "String",
              "Optional": true,
              "Description": "Specifies an authentication username for use with a channel. Supported by the webhook channel type."
            },
            "base_url": {
              "Type": "String",
              "Optional": true,
              "Description": "The base URL of the webhook destination."
            },
            "channel": {
              "Type": "String",
              "Optional": true,
              "Description": "The Slack channel to send notifications to."
            },
            "headers": {
              "Type": "Map",
              "Optional": true,
              "Description": "A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.",
              "ConflictsWith": [
                "config.0.headers_string"
              ],
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "headers_string": {
              "Type": "String",
              "Optional": true,
              "Description": "Use instead of headers if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects). The value provided should be a valid JSON string with escaped double quotes. Conflicts with headers.",
              "ConflictsWith": [
                "config.0.headers"
              ]
            },
            "include_json_attachment": {
              "Type": "String",
              "Optional": true,
              "Description": "0 or 1. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients."
            },
            "key": {
              "Type": "String",
              "Optional": true,
              "Description": "The key for integrating with VictorOps."
            },
            "payload": {
              "Type": "Map",
              "Optional": true,
              "Description": "A map of key/value pairs that represents the webhook payload. Must provide payload_type if setting this argument.",
              "ConflictsWith": [
                "config.0.payload_string"
              ],
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "payload_string": {
              "Type": "String",
              "Optional": true,
              "Description": "Use instead of payload if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects). The value provided should be a valid JSON string with escaped double quotes. Conflicts with payload.",
              "ConflictsWith": [
                "config.0.payload"
              ]
            },
            "payload_type": {
              "Type": "String",
              "Optional": true,
              "Description": "Can either be application/json or application/x-www-form-urlencoded. The payload_type argument is required if payload is set."
            },
            "recipients": {
              "Type": "String",
              "Optional": true,
              "Description": "A set of recipients for targeting notifications. Multiple values are comma separated."
            },
            "region": {
              "Type": "String",
              "Optional": true,
              "Description": "The data center region to store your data. Valid values are US and EU. Default is US."
            },
            "route_key": {
              "Type": "String",
              "Optional": true,
              "Description": "The route key for integrating with VictorOps."
            },
            "service_key": {
              "Type": "String",
              "Optional": true,
              "Description": "Specifies the service key for integrating with Pagerduty."
            },
            "tags": {
              "Type": "String",
              "Optional": true,
              "Description": "A set of tags for targeting notifications. Multiple values are comma separated."
            },
            "teams": {
              "Type": "String",
              "Optional": true,
              "Description": "A set of teams for targeting notifications. Multiple values are comma separated."
            },
            "url": {
              "Type": "String",
              "Optional": true,
              "Description": "Your organization's Slack URL."
            },
            "user_id": {
              "Type": "String",
              "Optional": true,
              "Description": "The user ID for use with the user channel type."
            }
          }
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "(Required) The name of the channel."
      },
      "type": {
        "Type": "String",
        "Required": true,
        "Description": "(Required) The type of channel. One of: (email, opsgenie, pagerduty, slack, user, victorops, webhook)."
      }
    },
    "newrelic_alert_condition": {
      "condition_scope": {
        "Type": "String",
        "Optional": true,
        "Description": "One of (application, instance). Choose application for most scenarios. If you are using the JVM plugin in New Relic, the instance setting allows your condition to trigger for specific app instances."
      },
      "enabled": {
        "Type": "Bool",
        "Optional": true,
        "Description": "The title of the condition. Must be between 1 and 64 characters, inclusive.",
        "Default": {
          "Type": "bool",
          "Value": "true"
        }
      },
      "entities": {
        "Type": "Set",
        "Required": true,
        "Description": "The instance IDs associated with this condition.",
        "MinItems": 1,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "Int"
        }
      },
      "gc_metric": {
        "Type": "String",
        "Optional": true,
        "Description": "A valid Garbage Collection metric e.g. GC/G1 Young Generation. This is required if you are using apm_jvm_metric with gc_cpu_time condition type."
      },
      "metric": {
        "Type": "String",
        "Required": true,
        "Description": "The metric field accepts parameters based on the type set."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The title of the condition. Must be between 1 and 64 characters, inclusive."
      },
      "policy_id": {
        "Type": "Int",
        "Required": true,
        "Description": "The ID of the policy where this condition should be used."
      },
      "runbook_url": {
        "Type": "String",
        "Optional": true,
        "Description": "Runbook URL to display in notifications."
      },
      "term": {
        "Type": "Set",
        "Required": true,
        "MinItems": 1,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "duration": {
              "Type": "Int",
              "Required": true,
              "Description": "In minutes, must be in the range of 5 to 120, inclusive."
            },
            "operator": {
              "Type": "String",
              "Optional": true,
              "Description": "One of (above, below, equal). Defaults to equal.",
              "Default": {
                "Type": "string",
                "Value": "equal"
              }
            },
            "priority": {
              "Type": "String",
              "Optional": true,
              "Description": "One of (critical, warning). Defaults to critical.",
              "Default": {
                "Type": "string",
                "Value": "critical"
              }
            },
            "threshold": {
              "Type": "Float",
              "Required": true,
              "Description": "Must be 0 or greater."
            },
            "time_function": {
              "Type": "String",
              "Required": true,
              "Description": "One of (all, any)."
            }
          }
        }
      },
      "type": {
        "Type": "String",
        "Required": true,
        "Description": "The type of condition. One of: (apm_app_metric, apm_jvm_metric, apm_kt_metric, browser_metric, mobile_metric, servers_metric)."
      },
      "user_defined_metric": {
        "Type": "String",
        "Optional": true,
        "Description": "A custom metric to be evaluated."
      },
      "user_defined_value_function": {
        "Type": "String",
        "Optional": true,
        "Description": "One of: (average, min, max, total, sample_size)."
      },
      "violation_close_timer": {
        "Type": "Int",
        "Optional": true,
        "Description": "Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: 1, 2, 4, 8, 12 or 24."
      }
    },
    "newrelic_alert_policy": {
      "account_id": {
        "Type": "Int",
        "Optional": true,
        "Description": "The New Relic account ID to operate on.",
        "DefaultFunc": "UNKNOWN"
      },
      "channel_ids": {
        "Type": "List",
        "Optional": true,
        "Description": "An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs cannot be imported via terraform import.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "Int"
        }
      },
      "incident_preference": {
        "Type": "String",
        "Optional": true,
        "Description": "The rollup strategy for the policy. Options include: PER_POLICY, PER_CONDITION, or PER_CONDITION_AND_TARGET. The default is PER_POLICY.",
        "Default": {
          "Type": "string",
          "Value": "PER_POLICY"
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the policy."
      }
    },
    "newrelic_alert_policy_channel": {
      "channel_ids": {
        "Type": "List",
        "Required": true,
        "Description": "Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid drift your Terraform state.",
        "MinItems": 1,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "Int"
        }
      },
      "policy_id": {
        "Type": "Int",
        "Required": true,
        "Description": "The ID of the policy."
      }
    },
    "newrelic_application_settings": {
      "app_apdex_threshold": {
        "Type": "Float",
        "Required": true
      },
      "enable_real_user_monitoring": {
        "Type": "Bool",
        "Required": true
      },
      "end_user_apdex_threshold": {
        "Type": "Float",
        "Required": true
      },
      "name": {
        "Type": "String",
        "Required": true
      }
    },
    "newrelic_dashboard": {
      "dashboard_url": {
        "Type": "String",
        "Description": "The URL for viewing the dashboard.",
        "Computed": true
      },
      "editable": {
        "Type": "String",
        "Optional": true,
        "Description": "Determines who can edit the dashboard in an account. Valid values are all, editable_by_all, editable_by_owner, or read_only. Defaults to editable_by_all.",
        "Default": {
          "Type": "string",
          "Value": "editable_by_all"
        }
      },
      "filter": {
        "Type": "List",
        "Optional": true,
        "Description": "A nested block that describes a dashboard filter. Exactly one nested filter block is allowed.",
        "MaxItems": 1,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "attributes": {
              "Type": "Set",
              "Optional": true,
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "event_types": {
              "Type": "Set",
              "Required": true,
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            }
          }
        }
      },
      "grid_column_count": {
        "Type": "Int",
        "Optional": true,
        "Description": "New Relic One supports a 3 column grid or a 12 column grid. New Relic Insights supports a 3 column grid.",
        "Default": {
          "Type": "int",
          "Value": "3"
        }
      },
      "icon": {
        "Type": "String",
        "Optional": true,
        "Description": "The icon for the dashboard.",
        "Default": {
          "Type": "string",
          "Value": "bar-chart"
        }
      },
      "title": {
        "Type": "String",
        "Required": true,
        "Description": "The title of the dashboard."
      },
      "visibility": {
        "Type": "String",
        "Optional": true,
        "Description": "Determines who can see the dashboard in an account. Valid values are all or owner. Defaults to all.",
        "Default": {
          "Type": "string",
          "Value": "all"
        }
      },
      "widget": {
        "Type": "Set",
        "Optional": true,
        "Description": "A nested block that describes a visualization. Up to 300 widget blocks are allowed in a dashboard definition.",
        "MaxItems": 300,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "column": {
              "Type": "Int",
              "Required": true,
              "Description": "Column position of widget from top left, starting at 1."
            },
            "compare_with": {
              "Type": "Set",
              "Optional": true,
              "Description": "A block describing a COMPARE WITH clause.",
              "IsBlock": true,
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "offset_duration": {
                    "Type": "String",
                    "Required": true,
                    "Description": "The offset duration for the COMPARE WITH clause."
                  },
                  "presentation": {
                    "Type": "List",
                    "Required": true,
                    "Description": "The presentation settings for the rendered data.",
                    "MaxItems": 1,
                    "IsBlock": true,
                    "Elem": {
                      "Type": "SchemaInfo",
                      "Info": {
                        "color": {
                          "Type": "String",
                          "Required": true,
                          "Description": "The color for the rendered data."
                        },
                        "name": {
                          "Type": "String",
                          "Required": true,
                          "Description": "The name for the rendered data."
                        }
                      }
                    }
                  }
                }
              }
            },
            "drilldown_dashboard_id": {
              "Type": "Int",
              "Optional": true,
              "Description": "The ID of a dashboard to link to from the widget's facets."
            },
            "duration": {
              "Type": "Int",
              "Optional": true
            },
            "end_time": {
              "Type": "Int",
              "Optional": true
            },
            "entity_ids": {
              "Type": "Set",
              "Optional": true,
              "Description": "A collection of entity ids to display data for. These are typically application IDs.",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "Int"
              }
            },
            "facet": {
              "Type": "String",
              "Optional": true
            },
            "height": {
              "Type": "Int",
              "Optional": true,
              "Description": "Height of the widget. Valid values are 1 to 3 inclusive. Defaults to 1.",
              "Default": {
                "Type": "int",
                "Value": "1"
              }
            },
            "limit": {
              "Type": "Int",
              "Optional": true
            },
            "metric": {
              "Type": "Set",
              "Optional": true,
              "Description": "A nested block that describes a metric.",
              "IsBlock": true,
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "name": {
                    "Type": "String",
                    "Required": true,
                    "Description": "The metric name to display."
                  },
                  "scope": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "The metric scope."
                  },
                  "units": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "The metric units."
                  },
                  "values": {
                    "Type": "Set",
                    "Optional": true,
                    "Description": "The metric values to display.",
                    "Elem": {
                      "Type": "SchemaElements",
                      "ElementsType": "String"
                    }
                  }
                }
              }
            },
            "notes": {
              "Type": "String",
              "Optional": true,
              "Description": "Description of the widget."
            },
            "nrql": {
              "Type": "String",
              "Optional": true,
              "Description": "Valid NRQL query string."
            },
            "order_by": {
              "Type": "String",
              "Optional": true
            },
            "raw_metric_name": {
              "Type": "String",
              "Computed": true
            },
            "row": {
              "Type": "Int",
              "Required": true,
              "Description": "Row position of widget from top left, starting at 1."
            },
            "source": {
              "Type": "String",
              "Optional": true,
              "Description": "The markdown source to be rendered in the widget."
            },
            "threshold_red": {
              "Type": "Float",
              "Optional": true,
              "Description": "Threshold above which the displayed value will be styled with a red color."
            },
            "threshold_yellow": {
              "Type": "Float",
              "Optional": true,
              "Description": "Threshold above which the displayed value will be styled with a yellow color."
            },
            "title": {
              "Type": "String",
              "Required": true,
              "Description": "A title for the widget."
            },
            "visualization": {
              "Type": "String",
              "Required": true,
              "Description": "How the widget visualizes data."
            },
            "widget_id": {
              "Type": "Int",
              "Description": "The ID of the widget.",
              "Computed": true
            },
            "width": {
              "Type": "Int",
              "Optional": true,
              "Description": "Width of the widget. Valid values are 1 to 3 inclusive. Defaults to 1.",
              "Default": {
                "Type": "int",
                "Value": "1"
              }
            }
          }
        }
      }
    },
    "newrelic_entity_tags": {
      "__timeouts__": [
        "create"
      ],
      "guid": {
        "Type": "String",
        "Required": true,
        "Description": "The guid of the entity to tag."
      },
      "tag": {
        "Type": "Set",
        "Required": true,
        "Description": "A set of key-value pairs to represent a tag. For example: Team:TeamName",
        "MinItems": 1,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "key": {
              "Type": "String",
              "Required": true,
              "Description": "The tag key."
            },
            "values": {
              "Type": "Set",
              "Required": true,
              "Description": "The tag values.",
              "MinItems": 1,
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            }
          }
        }
      }
    },
    "newrelic_infra_alert_condition": {
      "comparison": {
        "Type": "String",
        "Optional": true,
        "Description": "The operator used to evaluate the threshold value. Valid values are above, below, and equal. Supported by the infra_metric and infra_process_running condition types."
      },
      "created_at": {
        "Type": "Int",
        "Description": "The timestamp the alert condition was created.",
        "Computed": true
      },
      "critical": {
        "Type": "List",
        "Optional": true,
        "Description": "Identifies the threshold parameters for opening a critical alert violation.",
        "MaxItems": 1,
        "MinItems": 1,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "duration": {
              "Type": "Int",
              "Required": true
            },
            "time_function": {
              "Type": "String",
              "Optional": true
            },
            "value": {
              "Type": "Float",
              "Optional": true
            }
          }
        }
      },
      "enabled": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Whether the condition is turned on or off. Valid values are true and false. Defaults to true.",
        "Default": {
          "Type": "bool",
          "Value": "true"
        }
      },
      "event": {
        "Type": "String",
        "Optional": true,
        "Description": "The metric event; for example, SystemSample or StorageSample. Supported by the infra_metric condition type.",
        "Computed": true
      },
      "integration_provider": {
        "Type": "String",
        "Optional": true,
        "Description": "For alerts on integrations, use this instead of event. Supported by the infra_metric condition type."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The Infrastructure alert condition's name."
      },
      "policy_id": {
        "Type": "Int",
        "Required": true,
        "Description": "The ID of the alert policy where this condition should be used."
      },
      "process_where": {
        "Type": "String",
        "Optional": true,
        "Description": "Any filters applied to processes; for example: commandName = 'java'. Supported by the infra_process_running condition type."
      },
      "runbook_url": {
        "Type": "String",
        "Optional": true,
        "Description": "Runbook URL to display in notifications."
      },
      "select": {
        "Type": "String",
        "Optional": true,
        "Description": "The attribute name to identify the metric being targeted; for example, cpuPercent, diskFreePercent, or memoryResidentSizeBytes. The underlying API will automatically populate this value for Infrastructure integrations (for example diskFreePercent), so make sure to explicitly include this value to avoid diff issues. Supported by the infra_metric condition type."
      },
      "type": {
        "Type": "String",
        "Required": true,
        "Description": "The type of Infrastructure alert condition. Valid values are infra_process_running, infra_metric, and infra_host_not_reporting."
      },
      "updated_at": {
        "Type": "Int",
        "Description": "The timestamp the alert condition was last updated.",
        "Computed": true
      },
      "violation_close_timer": {
        "Type": "Int",
        "Optional": true,
        "Description": "Determines how much time, in minutes, will pass before a violation is automatically closed. Setting the time limit to 0 prevents a violation from being force-closed. Valid values are 0, 1, 2, 4, 8, 12, 24, 48, or 72",
        "Default": {
          "Type": "int",
          "Value": "24"
        }
      },
      "warning": {
        "Type": "List",
        "Optional": true,
        "Description": "Identifies the threshold parameters for opening a warning alert violation.",
        "MaxItems": 1,
        "MinItems": 1,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "duration": {
              "Type": "Int",
              "Required": true
            },
            "time_function": {
              "Type": "String",
              "Optional": true
            },
            "value": {
              "Type": "Float",
              "Optional": true
            }
          }
        }
      },
      "where": {
        "Type": "String",
        "Optional": true,
        "Description": "If applicable, this identifies any Infrastructure host filters used; for example: hostname LIKE '%cassandra%'."
      }
    },
    "newrelic_insights_event": {
      "event": {
        "Type": "Set",
        "Required": true,
        "MinItems": 1,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "attribute": {
              "Type": "Set",
              "Required": true,
              "Description": "An attribute to include in your event payload. Multiple attribute blocks can be defined for an event.",
              "MaxItems": 255,
              "MinItems": 1,
              "IsBlock": true,
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "key": {
                    "Type": "String",
                    "Required": true,
                    "Description": "The name of the attribute."
                  },
                  "type": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "Specify the type for the attribute value. This is useful when passing integer or float values to Insights. Allowed values are string, int, or float. Defaults to string."
                  },
                  "value": {
                    "Type": "String",
                    "Required": true,
                    "Description": "The value of the attribute."
                  }
                }
              }
            },
            "timestamp": {
              "Type": "Int",
              "Optional": true,
              "Description": "Must be a Unix epoch timestamp. You can define timestamps either in seconds or in milliseconds."
            },
            "type": {
              "Type": "String",
              "Required": true,
              "Description": "The event's name. Can be a combination of alphanumeric characters, underscores, and colons."
            }
          }
        }
      }
    },
    "newrelic_nrql_alert_condition": {
      "account_id": {
        "Type": "Int",
        "Optional": true,
        "Description": "The New Relic account ID for managing your NRQL alert conditions.",
        "DefaultFunc": "UNKNOWN"
      },
      "baseline_direction": {
        "Type": "String",
        "Optional": true,
        "Description": "The baseline direction of a baseline NRQL alert condition. Valid values are: 'LOWER_ONLY', 'UPPER_AND_LOWER', 'UPPER_ONLY' (case insensitive).",
        "ConflictsWith": [
          "value_function"
        ]
      },
      "critical": {
        "Type": "List",
        "Optional": true,
        "Description": "A condition term with priority set to critical.",
        "MaxItems": 1,
        "MinItems": 1,
        "ConflictsWith": [
          "term.0"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "duration": {
              "Type": "Int",
              "Optional": true,
              "Description": "In minutes, must be in the range of 1 to 120 (inclusive).",
              "ConflictsWith": [
                "term.0.threshold_duration"
              ],
              "Deprecated": "use `threshold_duration` attribute instead"
            },
            "operator": {
              "Type": "String",
              "Optional": true,
              "Description": "One of (above, below, equal). Defaults to 'equal'.",
              "Default": {
                "Type": "string",
                "Value": "equal"
              }
            },
            "threshold": {
              "Type": "Float",
              "Required": true,
              "Description": "Must be 0 or greater. For baseline conditions must be in range [1, 1000]."
            },
            "threshold_duration": {
              "Type": "Int",
              "Optional": true,
              "Description": "The duration of time, in seconds, that the threshold must violate for in order to create a violation. Value must be a multiple of 60 and within 120-3600 seconds for baseline conditions and 120-7200 seconds for static conditions.",
              "ConflictsWith": [
                "term.0.duration"
              ]
            },
            "threshold_occurrences": {
              "Type": "String",
              "Optional": true,
              "Description": "The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).",
              "ConflictsWith": [
                "term.0.time_function"
              ]
            },
            "time_function": {
              "Type": "String",
              "Optional": true,
              "Description": "Valid values are: 'all' or 'any'",
              "ConflictsWith": [
                "term.0.threshold_occurrences"
              ],
              "Deprecated": "use `threshold_occurrences` attribute instead"
            }
          }
        }
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "The description of the NRQL alert condition."
      },
      "enabled": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Whether or not to enable the alert condition.",
        "Default": {
          "Type": "bool",
          "Value": "true"
        }
      },
      "expected_groups": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of expected groups when using outlier detection."
      },
      "ignore_overlap": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Whether to look for a convergence of groups when using outlier detection.",
        "ConflictsWith": [
          "open_violation_on_group_overlap"
        ],
        "Deprecated": "use `open_violation_on_group_overlap` attribute instead, but use the inverse of your boolean - e.g. if ignore_overlap = false, use open_violation_on_group_overlap = true"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The title of the condition."
      },
      "nrql": {
        "Type": "List",
        "Required": true,
        "Description": "A NRQL query.",
        "MaxItems": 1,
        "MinItems": 1,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "evaluation_offset": {
              "Type": "Int",
              "Optional": true,
              "Description": "NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `evaluation_offset`.",
              "ConflictsWith": [
                "nrql.0.since_value"
              ]
            },
            "query": {
              "Type": "String",
              "Required": true
            },
            "since_value": {
              "Type": "String",
              "Optional": true,
              "Description": "NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `since_value`.",
              "ConflictsWith": [
                "nrql.0.evaluation_offset"
              ],
              "Deprecated": "use `evaluation_offset` attribute instead"
            }
          }
        }
      },
      "open_violation_on_group_overlap": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Whether overlapping groups should produce a violation.",
        "ConflictsWith": [
          "ignore_overlap"
        ]
      },
      "policy_id": {
        "Type": "Int",
        "Required": true,
        "Description": "The ID of the policy where this condition should be used."
      },
      "runbook_url": {
        "Type": "String",
        "Optional": true,
        "Description": "Runbook URL to display in notifications."
      },
      "term": {
        "Type": "Set",
        "Optional": true,
        "Description": "A set of terms for this condition. Max 2 terms allowed - at least one 1 critical term and 1 optional warning term.",
        "MaxItems": 2,
        "MinItems": 1,
        "ConflictsWith": [
          "critical",
          "warning"
        ],
        "Deprecated": "use `critical` and `warning` attributes instead",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "duration": {
              "Type": "Int",
              "Optional": true,
              "Description": "In minutes, must be in the range of 1 to 120 (inclusive).",
              "ConflictsWith": [
                "term.0.threshold_duration"
              ],
              "Deprecated": "use `threshold_duration` attribute instead"
            },
            "operator": {
              "Type": "String",
              "Optional": true,
              "Description": "One of (above, below, equal). Defaults to 'equal'.",
              "Default": {
                "Type": "string",
                "Value": "equal"
              }
            },
            "priority": {
              "Type": "String",
              "Optional": true,
              "Description": "One of (critical, warning). Defaults to 'critical'. At least one condition term must have priority set to 'critical'.",
              "Default": {
                "Type": "string",
                "Value": "critical"
              }
            },
            "threshold": {
              "Type": "Float",
              "Required": true,
              "Description": "Must be 0 or greater. For baseline conditions must be in range [1, 1000]."
            },
            "threshold_duration": {
              "Type": "Int",
              "Optional": true,
              "Description": "The duration of time, in seconds, that the threshold must violate for in order to create a violation. Value must be a multiple of 60 and within 120-3600 seconds for baseline conditions and 120-7200 seconds for static conditions.",
              "ConflictsWith": [
                "term.0.duration"
              ]
            },
            "threshold_occurrences": {
              "Type": "String",
              "Optional": true,
              "Description": "The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).",
              "ConflictsWith": [
                "term.0.time_function"
              ]
            },
            "time_function": {
              "Type": "String",
              "Optional": true,
              "Description": "Valid values are: 'all' or 'any'",
              "ConflictsWith": [
                "term.0.threshold_occurrences"
              ],
              "Deprecated": "use `threshold_occurrences` attribute instead"
            }
          }
        }
      },
      "type": {
        "Type": "String",
        "Optional": true,
        "Description": "The type of NRQL alert condition to create. Valid values are: 'static', 'outlier', 'baseline'.",
        "Default": {
          "Type": "string",
          "Value": "static"
        }
      },
      "value_function": {
        "Type": "String",
        "Optional": true,
        "Description": "Valid values are: 'single_value' or 'sum'"
      },
      "violation_time_limit": {
        "Type": "String",
        "Optional": true,
        "Description": "Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are 'ONE_HOUR', 'TWO_HOURS', 'FOUR_HOURS', 'EIGHT_HOURS', 'TWELVE_HOURS', 'TWENTY_FOUR_HOURS' (case insensitive).",
        "ConflictsWith": [
          "violation_time_limit_seconds"
        ]
      },
      "violation_time_limit_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are 3600, 7200, 14400, 28800, 43200, and 86400.",
        "ConflictsWith": [
          "violation_time_limit"
        ],
        "Deprecated": "use `violation_time_limit` attribute instead"
      },
      "warning": {
        "Type": "List",
        "Optional": true,
        "Description": "A condition term with priority set to warning.",
        "MaxItems": 1,
        "MinItems": 1,
        "ConflictsWith": [
          "term.0"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "duration": {
              "Type": "Int",
              "Optional": true,
              "Description": "In minutes, must be in the range of 1 to 120 (inclusive).",
              "ConflictsWith": [
                "term.0.threshold_duration"
              ],
              "Deprecated": "use `threshold_duration` attribute instead"
            },
            "operator": {
              "Type": "String",
              "Optional": true,
              "Description": "One of (above, below, equal). Defaults to 'equal'.",
              "Default": {
                "Type": "string",
                "Value": "equal"
              }
            },
            "threshold": {
              "Type": "Float",
              "Required": true,
              "Description": "Must be 0 or greater. For baseline conditions must be in range [1, 1000]."
            },
            "threshold_duration": {
              "Type": "Int",
              "Optional": true,
              "Description": "The duration of time, in seconds, that the threshold must violate for in order to create a violation. Value must be a multiple of 60 and within 120-3600 seconds for baseline conditions and 120-7200 seconds for static conditions.",
              "ConflictsWith": [
                "term.0.duration"
              ]
            },
            "threshold_occurrences": {
              "Type": "String",
              "Optional": true,
              "Description": "The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).",
              "ConflictsWith": [
                "term.0.time_function"
              ]
            },
            "time_function": {
              "Type": "String",
              "Optional": true,
              "Description": "Valid values are: 'all' or 'any'",
              "ConflictsWith": [
                "term.0.threshold_occurrences"
              ],
              "Deprecated": "use `threshold_occurrences` attribute instead"
            }
          }
        }
      }
    },
    "newrelic_plugins_alert_condition": {
      "enabled": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Whether or not this condition is enabled.",
        "Default": {
          "Type": "bool",
          "Value": "true"
        }
      },
      "entities": {
        "Type": "Set",
        "Required": true,
        "Description": "The plugin component IDs to target.",
        "MinItems": 1,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "Int"
        }
      },
      "metric": {
        "Type": "String",
        "Required": true,
        "Description": "The plugin metric to evaluate."
      },
      "metric_description": {
        "Type": "String",
        "Required": true,
        "Description": "The metric description."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The title of the condition. Must be between 1 and 64 characters, inclusive."
      },
      "plugin_guid": {
        "Type": "String",
        "Required": true,
        "Description": "The GUID of the plugin which produces the metric."
      },
      "plugin_id": {
        "Type": "String",
        "Required": true,
        "Description": "The ID of the installed plugin instance which produces the metric."
      },
      "policy_id": {
        "Type": "Int",
        "Required": true,
        "Description": "The ID of the policy where this condition should be used."
      },
      "runbook_url": {
        "Type": "String",
        "Optional": true,
        "Description": "Runbook URL to display in notifications."
      },
      "term": {
        "Type": "Set",
        "Required": true,
        "MinItems": 1,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "duration": {
              "Type": "Int",
              "Required": true,
              "Description": "In minutes, must be in the range of 5 to 120, inclusive."
            },
            "operator": {
              "Type": "String",
              "Optional": true,
              "Description": "One of `above`, `below`, or `equal`. Defaults to equal.",
              "Default": {
                "Type": "string",
                "Value": "equal"
              }
            },
            "priority": {
              "Type": "String",
              "Optional": true,
              "Description": "One of `critical` or `warning`. Defaults to critical.",
              "Default": {
                "Type": "string",
                "Value": "critical"
              }
            },
            "threshold": {
              "Type": "Float",
              "Required": true,
              "Description": "Must be 0 or greater."
            },
            "time_function": {
              "Type": "String",
              "Required": true,
              "Description": "One of `all` or `any`."
            }
          }
        }
      },
      "value_function": {
        "Type": "String",
        "Required": true,
        "Description": "The value function to apply to the metric data.  One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`."
      }
    },
    "newrelic_synthetics_alert_condition": {
      "enabled": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Set whether to enable the alert condition. Defaults to true.",
        "Default": {
          "Type": "bool",
          "Value": "true"
        }
      },
      "monitor_id": {
        "Type": "String",
        "Required": true,
        "Description": "The ID of the Synthetics monitor to be referenced in the alert condition.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The title of this condition."
      },
      "policy_id": {
        "Type": "Int",
        "Required": true,
        "Description": "The ID of the policy where this condition should be used."
      },
      "runbook_url": {
        "Type": "String",
        "Optional": true,
        "Description": "Runbook URL to display in notifications."
      }
    },
    "newrelic_synthetics_label": {
      "href": {
        "Type": "String",
        "Description": "The URL of the Synthetics label.",
        "Computed": true
      },
      "monitor_id": {
        "Type": "String",
        "Required": true,
        "Description": "The ID of the monitor that will be assigned the label."
      },
      "type": {
        "Type": "String",
        "Required": true,
        "Description": "A string representing the label key/category."
      },
      "value": {
        "Type": "String",
        "Required": true,
        "Description": "A string representing the label value."
      }
    },
    "newrelic_synthetics_monitor": {
      "bypass_head_request": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Bypass HEAD request."
      },
      "frequency": {
        "Type": "Int",
        "Required": true,
        "Description": "The interval (in minutes) at which this monitor should run. Valid values are 1, 5, 10, 15, 30, 60, 360, 720, or 1440."
      },
      "locations": {
        "Type": "Set",
        "Required": true,
        "Description": "The locations in which this monitor should be run.",
        "MinItems": 1,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The title of this monitor."
      },
      "sla_threshold": {
        "Type": "Float",
        "Optional": true,
        "Description": "The base threshold for the SLA report.",
        "Default": {
          "Type": "int",
          "Value": "7"
        }
      },
      "status": {
        "Type": "String",
        "Required": true,
        "Description": "The monitor status (i.e. ENABLED, MUTED, DISABLED)."
      },
      "treat_redirect_as_failure": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Fail the monitor check if redirected."
      },
      "type": {
        "Type": "String",
        "Required": true,
        "Description": "The monitor type. Valid values are SIMPLE, BROWSER, SCRIPT_BROWSER, and SCRIPT_API."
      },
      "uri": {
        "Type": "String",
        "Optional": true,
        "Description": "The URI for the monitor to hit."
      },
      "validation_string": {
        "Type": "String",
        "Optional": true,
        "Description": "The string to validate against in the response."
      },
      "verify_ssl": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Verify SSL."
      }
    },
    "newrelic_synthetics_monitor_script": {
      "monitor_id": {
        "Type": "String",
        "Required": true,
        "Description": "The ID of the monitor to attach the script to."
      },
      "text": {
        "Type": "String",
        "Required": true,
        "Description": "The plaintext representing the monitor script."
      }
    },
    "newrelic_synthetics_secure_credential": {
      "created_at": {
        "Type": "String",
        "Optional": true,
        "Description": "The time the secure credential was created.",
        "Computed": true
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "The secure credential's description."
      },
      "key": {
        "Type": "String",
        "Required": true,
        "Description": "The secure credential's key name. Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API."
      },
      "last_updated": {
        "Type": "String",
        "Optional": true,
        "Description": "The time the secure credential was last updated.",
        "Computed": true
      },
      "value": {
        "Type": "String",
        "Required": true,
        "Description": "The secure credential's value."
      }
    },
    "newrelic_workload": {
      "account_id": {
        "Type": "Int",
        "Required": true,
        "Description": "The New Relic account ID where you want to create the workload."
      },
      "composite_entity_search_query": {
        "Type": "String",
        "Description": "The composite query used to compose a dynamic workload.",
        "Computed": true
      },
      "entity_guids": {
        "Type": "Set",
        "Optional": true,
        "Description": "A list of entity GUIDs manually assigned to this workload.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "entity_search_query": {
        "Type": "Set",
        "Optional": true,
        "Description": "A list of search queries that define a dynamic workload.",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "query": {
              "Type": "String",
              "Required": true,
              "Description": "The query."
            }
          }
        }
      },
      "guid": {
        "Type": "String",
        "Description": "The unique entity identifier of the workload in New Relic.",
        "Computed": true
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The workload's name."
      },
      "permalink": {
        "Type": "String",
        "Description": "The URL of the workload.",
        "Computed": true
      },
      "scope_account_ids": {
        "Type": "Set",
        "Optional": true,
        "Description": "A list of account IDs that will be used to get entities from.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "Int"
        }
      },
      "workload_id": {
        "Type": "Int",
        "Description": "The unique entity identifier of the workload.",
        "Computed": true
      }
    }
  },
  "data-sources": {
    "newrelic_alert_channel": {
      "config": {
        "Type": "List",
        "Description": "Alert channel configuration.",
        "Computed": true,
        "MaxItems": 1,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "api_key": {
              "Type": "String",
              "Optional": true
            },
            "auth_password": {
              "Type": "String",
              "Optional": true
            },
            "auth_type": {
              "Type": "String",
              "Optional": true
            },
            "auth_username": {
              "Type": "String",
              "Optional": true
            },
            "base_url": {
              "Type": "String",
              "Optional": true
            },
            "channel": {
              "Type": "String",
              "Optional": true
            },
            "headers": {
              "Type": "Map",
              "Optional": true,
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "include_json_attachment": {
              "Type": "String",
              "Optional": true
            },
            "key": {
              "Type": "String",
              "Optional": true
            },
            "payload": {
              "Type": "Map",
              "Optional": true,
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "payload_type": {
              "Type": "String",
              "Optional": true
            },
            "recipients": {
              "Type": "String",
              "Optional": true
            },
            "region": {
              "Type": "String",
              "Optional": true
            },
            "route_key": {
              "Type": "String",
              "Optional": true
            },
            "service_key": {
              "Type": "String",
              "Optional": true
            },
            "tags": {
              "Type": "String",
              "Optional": true
            },
            "teams": {
              "Type": "String",
              "Optional": true
            },
            "url": {
              "Type": "String",
              "Optional": true
            },
            "user_id": {
              "Type": "String",
              "Optional": true
            }
          }
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the alert channel in New Relic."
      },
      "policy_ids": {
        "Type": "List",
        "Description": "A list of policy IDs associated with the alert channel.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "Int"
        }
      },
      "type": {
        "Type": "String",
        "Description": "The type of channel. One of: (webhook, email, opsgenie, pagerduty, slack, user, victorops).",
        "Computed": true
      }
    },
    "newrelic_alert_policy": {
      "account_id": {
        "Type": "Int",
        "Optional": true,
        "Description": "The New Relic account ID to operate on.",
        "DefaultFunc": "UNKNOWN"
      },
      "created_at": {
        "Type": "String",
        "Description": "The time the policy was created.",
        "Computed": true
      },
      "incident_preference": {
        "Type": "String",
        "Optional": true,
        "Description": "The rollup strategy for the policy. Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`. The default is `PER_POLICY`."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the alert policy in New Relic."
      },
      "updated_at": {
        "Type": "String",
        "Description": "The time the policy was last updated.",
        "Computed": true
      }
    },
    "newrelic_application": {
      "host_ids": {
        "Type": "List",
        "Description": "A list of host IDs associated with the application.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "Int"
        }
      },
      "instance_ids": {
        "Type": "List",
        "Description": "A list of instance IDs associated with the application.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "Int"
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the application in New Relic."
      }
    },
    "newrelic_entity": {
      "account_id": {
        "Type": "Int",
        "Description": "The New Relic account ID associated with this entity.",
        "Computed": true
      },
      "application_id": {
        "Type": "Int",
        "Description": "The domain-specific ID of the entity (only returned for APM and Browser applications)",
        "Computed": true
      },
      "domain": {
        "Type": "String",
        "Optional": true,
        "Description": "The entity's domain. Valid values are APM, BROWSER, INFRA, MOBILE, and SYNTH.",
        "Computed": true
      },
      "guid": {
        "Type": "String",
        "Description": "A unique entity identifier.",
        "Computed": true
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned."
      },
      "tag": {
        "Type": "List",
        "Optional": true,
        "Description": "A tag applied to the entity.",
        "MaxItems": 1,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "key": {
              "Type": "String",
              "Required": true,
              "Description": "The tag key."
            },
            "value": {
              "Type": "String",
              "Required": true,
              "Description": "The tag value."
            }
          }
        }
      },
      "type": {
        "Type": "String",
        "Optional": true,
        "Description": "The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, and WORRKLOAD.",
        "Computed": true
      }
    },
    "newrelic_key_transaction": {
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the key transaction in New Relic."
      }
    },
    "newrelic_plugin": {
      "guid": {
        "Type": "String",
        "Required": true,
        "Description": "The GUID of the plugin in New Relic."
      },
      "id": {
        "Type": "String",
        "Description": "The ID of the installed plugin instance.",
        "Computed": true
      }
    },
    "newrelic_plugin_component": {
      "health_status": {
        "Type": "String",
        "Description": "The health status of the plugin component.",
        "Computed": true
      },
      "id": {
        "Type": "String",
        "Description": "The ID of the plugin component.",
        "Computed": true
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the plugin component."
      },
      "plugin_id": {
        "Type": "Int",
        "Required": true,
        "Description": "The ID of the plugin instance this component belongs to."
      }
    },
    "newrelic_synthetics_monitor": {
      "monitor_id": {
        "Type": "String",
        "Description": "The ID of the synthetics monitor.",
        "Computed": true
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the synthetics monitor in New Relic."
      }
    },
    "newrelic_synthetics_secure_credential": {
      "created_at": {
        "Type": "String",
        "Description": "The time the secure credential was created.",
        "Computed": true
      },
      "description": {
        "Type": "String",
        "Description": "The secure credential's description.",
        "Computed": true
      },
      "key": {
        "Type": "String",
        "Required": true,
        "Description": "The secure credential's key name. Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API."
      },
      "last_updated": {
        "Type": "String",
        "Description": "The time the secure credential was last updated.",
        "Computed": true
      }
    }
  }
}