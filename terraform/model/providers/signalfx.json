{
  ".schema_version": "1",
  "name": "signalfx",
  "type": "provider",
  "version": "v4.18.4",
  "provider": {
    "api_url": {
      "Type": "String",
      "Optional": true,
      "Description": "API URL for your SignalFx org, may include a realm",
      "Default": {
        "Type": "string",
        "Value": "https://api.signalfx.com"
      }
    },
    "auth_token": {
      "Type": "String",
      "Optional": true,
      "Description": "SignalFx auth token",
      "DefaultFunc": "ENV(SFX_AUTH_TOKEN)"
    },
    "custom_app_url": {
      "Type": "String",
      "Optional": true,
      "Description": "Application URL for your SignalFx org, often customzied for organizations using SSO",
      "Default": {
        "Type": "string",
        "Value": "https://app.signalfx.com"
      }
    }
  },
  "resources": {
    "signalfx_alert_muting_rule": {
      "description": {
        "Type": "String",
        "Required": true,
        "Description": "description of the rule"
      },
      "detectors": {
        "Type": "List",
        "Optional": true,
        "Description": "detectors to which this muting rule applies",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "effective_start_time": {
        "Type": "Int",
        "Computed": true
      },
      "filter": {
        "Type": "Set",
        "Required": true,
        "Description": "list of alert muting filters for this rule",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "negated": {
              "Type": "Bool",
              "Optional": true,
              "Description": "(false by default) whether this filter should be a \"not\" filter",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "property": {
              "Type": "String",
              "Required": true,
              "Description": "the property to filter by"
            },
            "property_value": {
              "Type": "String",
              "Required": true,
              "Description": "the value of the property to filter by"
            }
          }
        }
      },
      "start_time": {
        "Type": "Int",
        "Required": true,
        "Description": "starting time of an alert muting rule as a Unix timestamp, in seconds"
      },
      "stop_time": {
        "Type": "Int",
        "Optional": true,
        "Description": "stop time of an alert muting rule as a Unix timestamp, in seconds",
        "Default": {
          "Type": "int",
          "Value": "0"
        }
      }
    },
    "signalfx_aws_external_integration": {
      "external_id": {
        "Type": "String",
        "Description": "The SignalFx-generated AWS external ID to use with an AWS integration.",
        "Computed": true
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the integration"
      },
      "signalfx_aws_account": {
        "Type": "String",
        "Description": "The SignalFx AWS account ID to use with an AWS role.",
        "Computed": true
      }
    },
    "signalfx_aws_integration": {
      "auth_method": {
        "Type": "String",
        "Description": "The mechanism used to authenticate with AWS.",
        "Computed": true,
        "Removed": "Use one of `signalfx_aws_external_integration` or `signalfx_aws_token_integration`"
      },
      "custom_cloudwatch_namespaces": {
        "Type": "Set",
        "Optional": true,
        "Description": "List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS; SignalFx imports the metrics so you can monitor them.",
        "ConflictsWith": [
          "custom_namespace_sync_rule"
        ],
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "custom_namespace_sync_rule": {
        "Type": "Set",
        "Optional": true,
        "Description": "Each element controls the data collected by SignalFx for the specified namespace. If you specify this property, SignalFx ignores values in the \"custom_cloudwatch_namespaces\" property.",
        "ConflictsWith": [
          "custom_cloudwatch_namespaces"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "default_action": {
              "Type": "String",
              "Optional": true,
              "Description": "Controls the SignalFx default behavior for processing data from an AWS namespace. The available actions are one of \"Include\" or \"Exclude\"."
            },
            "filter_action": {
              "Type": "String",
              "Optional": true,
              "Description": "Controls how SignalFx processes data from a custom AWS namespace. The available actions are one of \"Include\" or \"Exclude\"."
            },
            "filter_source": {
              "Type": "String",
              "Optional": true,
              "Description": "Expression that selects the data that SignalFx should sync for the custom namespace associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function; it can be any valid SignalFlow filter expression."
            },
            "namespace": {
              "Type": "String",
              "Required": true,
              "Description": "An AWS custom namespace having custom AWS metrics that you want to sync with SignalFx. See the AWS documentation on publishing metrics for more information."
            }
          }
        }
      },
      "enable_aws_usage": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Flag that controls how SignalFx imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`, SignalFx imports the metrics."
      },
      "enabled": {
        "Type": "Bool",
        "Required": true,
        "Description": "Whether the integration is enabled or not"
      },
      "external_id": {
        "Type": "String",
        "Optional": true,
        "Description": "Used with `signalfx_aws_external_integration`. Use this property to specify the external id.",
        "ConflictsWith": [
          "token",
          "key"
        ]
      },
      "import_cloud_watch": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Flag that controls how SignalFx imports Cloud Watch metrics. If true, SignalFx imports Cloud Watch metrics from AWS."
      },
      "integration_id": {
        "Type": "String",
        "Required": true,
        "Description": "The ID of this integration"
      },
      "key": {
        "Type": "String",
        "Optional": true,
        "Description": "Used with `signalfx_aws_token_integration`. Use this property to specify the token.",
        "ConflictsWith": [
          "role_arn",
          "external_id"
        ]
      },
      "name": {
        "Type": "String",
        "Description": "Name of the integration",
        "Computed": true,
        "Removed": "Please specify the name in `signalfx_aws_external_integration` or `signalfx_aws_integration_token`"
      },
      "namespace_sync_rule": {
        "Type": "Set",
        "Optional": true,
        "Description": "Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that SignalFx collects for the namespace. If you specify this property, SignalFx ignores the values in the AWS CloudWatch Integration Model \"services\" property. If you don't specify either property, SignalFx syncs all data in all AWS namespaces.",
        "ConflictsWith": [
          "services"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "default_action": {
              "Type": "String",
              "Optional": true,
              "Description": "Controls the SignalFx default behavior for processing data from an AWS namespace. SignalFx ignores this property unless you specify the \"filter\" property in the namespace sync rule. If you do specify a filter, use this property to control how SignalFx treats data that doesn't match the filter. The available actions are one of \"Include\" or \"Exclude\"."
            },
            "filter_action": {
              "Type": "String",
              "Optional": true,
              "Description": "Controls how SignalFx processes data from a custom AWS namespace. The available actions are one of \"Include\" or \"Exclude\"."
            },
            "filter_source": {
              "Type": "String",
              "Optional": true,
              "Description": "Expression that selects the data that SignalFx should sync for the custom namespace associated with this sync rule. The expression uses the syntax defined for the SignalFlow `filter()` function; it can be any valid SignalFlow filter expression."
            },
            "namespace": {
              "Type": "String",
              "Required": true,
              "Description": "An AWS namespace having custom AWS metrics that you want to sync with SignalFx. See the AWS documentation on publishing metrics for more information."
            }
          }
        }
      },
      "poll_rate": {
        "Type": "Int",
        "Optional": true,
        "Description": "AWS poll rate (in seconds). One of `60` or `300`."
      },
      "regions": {
        "Type": "Set",
        "Optional": true,
        "Description": "List of AWS regions that SignalFx should monitor.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "role_arn": {
        "Type": "String",
        "Optional": true,
        "Description": "Used with `signalfx_aws_external_integration`. Use this property to specify the AIM role ARN.",
        "ConflictsWith": [
          "token",
          "key"
        ]
      },
      "services": {
        "Type": "Set",
        "Optional": true,
        "Description": "List of AWS services that you want SignalFx to monitor. Each element is a string designating an AWS service.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "token": {
        "Type": "String",
        "Optional": true,
        "Description": "Used with `signalfx_aws_token_integration`. Use this property to specify the token.",
        "ConflictsWith": [
          "role_arn",
          "external_id"
        ]
      },
      "use_get_metric_data_method": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Enables the use of Amazon's GetMetricData API. Defaults to `false`.",
        "Default": {
          "Type": "bool",
          "Value": "false"
        }
      }
    },
    "signalfx_aws_token_integration": {
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the integration"
      },
      "signalfx_aws_account": {
        "Type": "String",
        "Description": "The SignalFx AWS account ID to use with an AWS role.",
        "Computed": true
      },
      "token_id": {
        "Type": "String",
        "Description": "The SignalFx-generated AWS token to use with an AWS integration.",
        "Computed": true
      }
    },
    "signalfx_azure_integration": {
      "app_id": {
        "Type": "String",
        "Required": true,
        "Description": "Azure application ID for the SignalFx app."
      },
      "enabled": {
        "Type": "Bool",
        "Required": true,
        "Description": "Whether the integration is enabled or not"
      },
      "environment": {
        "Type": "String",
        "Optional": true,
        "Description": "what type of Azure integration this is. The allowed values are `\"azure_us_government\"` and `\"azure\"`. Defaults to `\"azure\"`",
        "Default": {
          "Type": "string",
          "Value": "azure"
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the integration"
      },
      "poll_rate": {
        "Type": "Int",
        "Optional": true,
        "Description": "Azure poll rate (in seconds). One of `60` or `300`."
      },
      "secret_key": {
        "Type": "String",
        "Required": true,
        "Description": "Azure secret key that associates the SignalFx app in Azure with the Azure tenant."
      },
      "services": {
        "Type": "Set",
        "Optional": true,
        "Description": "List of Microsoft Azure service names for the Azure services you want SignalFx to monitor. SignalFx only supports certain services, and if you specify an unsupported one, you receive an API error.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "subscriptions": {
        "Type": "Set",
        "Required": true,
        "Description": "List of Azure subscriptions that SignalFx should monitor.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "tenant_id": {
        "Type": "String",
        "Required": true,
        "Description": "Azure ID of the Azure tenant."
      }
    },
    "signalfx_dashboard": {
      "authorized_writer_teams": {
        "Type": "Set",
        "Optional": true,
        "Description": "Team IDs that have write access to this dashboard",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "authorized_writer_users": {
        "Type": "Set",
        "Optional": true,
        "Description": "User IDs that have write access to this dashboard",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "chart": {
        "Type": "Set",
        "Optional": true,
        "Description": "Chart ID and layout information for the charts in the dashboard",
        "ConflictsWith": [
          "column",
          "grid"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "chart_id": {
              "Type": "String",
              "Required": true,
              "Description": "ID of the chart to display"
            },
            "column": {
              "Type": "Int",
              "Optional": true,
              "Description": "The column to show the chart in (zero-based); this value always represents the leftmost column of the chart. (between 0 and 11)"
            },
            "height": {
              "Type": "Int",
              "Optional": true,
              "Description": "How many rows the chart should take up. (greater than or equal to 1)",
              "Default": {
                "Type": "int",
                "Value": "1"
              }
            },
            "row": {
              "Type": "Int",
              "Optional": true,
              "Description": "The row to show the chart in (zero-based); if height \u003e 1, this value represents the topmost row of the chart. (greater than or equal to 0)"
            },
            "width": {
              "Type": "Int",
              "Optional": true,
              "Description": "How many columns (out of a total of 12, one-based) the chart should take up. (between 1 and 12)",
              "Default": {
                "Type": "int",
                "Value": "12"
              }
            }
          }
        }
      },
      "charts_resolution": {
        "Type": "String",
        "Optional": true,
        "Description": "Specifies the chart data display resolution for charts in this dashboard. Value can be one of \"default\", \"low\", \"high\", or \"highest\". default by default",
        "Default": {
          "Type": "string",
          "Value": "default"
        }
      },
      "column": {
        "Type": "List",
        "Optional": true,
        "Description": "Column layout. Charts listed, will be placed in a single column with the same width and height",
        "ConflictsWith": [
          "grid",
          "chart"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "chart_ids": {
              "Type": "List",
              "Required": true,
              "Description": "Charts to use for the column",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "column": {
              "Type": "Int",
              "Optional": true,
              "Description": "The column to show the chart in (zero-based); this value always represents the leftmost column of the chart. (between 0 and 11)",
              "Default": {
                "Type": "int",
                "Value": "0"
              }
            },
            "height": {
              "Type": "Int",
              "Optional": true,
              "Description": "How many rows each chart should take up. (greater than or equal to 1)",
              "Default": {
                "Type": "int",
                "Value": "1"
              }
            },
            "width": {
              "Type": "Int",
              "Optional": true,
              "Description": "Number of columns (out of a total of 12) each chart should take up. (between 1 and 12)",
              "Default": {
                "Type": "int",
                "Value": "12"
              }
            }
          }
        }
      },
      "dashboard_group": {
        "Type": "String",
        "Required": true,
        "Description": "The ID of the dashboard group that contains the dashboard. If an ID is not provided during creation, the dashboard will be placed in a newly created dashboard group"
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Description of the dashboard (Optional)"
      },
      "discovery_options_query": {
        "Type": "String",
        "Optional": true
      },
      "discovery_options_selectors": {
        "Type": "Set",
        "Optional": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "end_time": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds since epoch to end the visualization",
        "ConflictsWith": [
          "time_range"
        ]
      },
      "event_overlay": {
        "Type": "List",
        "Optional": true,
        "Description": "Event overlay to add to charts",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "color": {
              "Type": "String",
              "Optional": true,
              "Description": "Color to use"
            },
            "label": {
              "Type": "String",
              "Optional": true,
              "Description": "The text displaying in the dropdown menu used to select this event overlay as an active overlay for the dashboard."
            },
            "line": {
              "Type": "Bool",
              "Optional": true,
              "Description": "(false by default) Whether a vertical line should be displayed in the plot at the time the event occurs",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "signal": {
              "Type": "String",
              "Required": true,
              "Description": "Search term used to define events"
            },
            "source": {
              "Type": "List",
              "Optional": true,
              "IsBlock": true,
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "negated": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "(false by default) Whether this filter should be a \"not\" filter",
                    "Default": {
                      "Type": "bool",
                      "Value": "false"
                    }
                  },
                  "property": {
                    "Type": "String",
                    "Required": true,
                    "Description": "A metric time series dimension or property name"
                  },
                  "values": {
                    "Type": "Set",
                    "Required": true,
                    "Description": "List of strings (which will be treated as an OR filter on the property)",
                    "Elem": {
                      "Type": "SchemaElements",
                      "ElementsType": "String"
                    }
                  }
                }
              }
            },
            "type": {
              "Type": "String",
              "Optional": true,
              "Description": "Source for this event's data. Can be \"eventTimeSeries\" (default) or \"detectorEvents\".",
              "Default": {
                "Type": "string",
                "Value": "eventTimeSeries"
              }
            }
          }
        }
      },
      "filter": {
        "Type": "Set",
        "Optional": true,
        "Description": "Filter to apply to each chart in the dashboard",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "apply_if_exist": {
              "Type": "Bool",
              "Optional": true,
              "Description": "If true, this filter will also match data that does not have the specified property",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "negated": {
              "Type": "Bool",
              "Optional": true,
              "Description": "(false by default) Whether this filter should be a \"not\" filter",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "property": {
              "Type": "String",
              "Required": true,
              "Description": "A metric time series dimension or property name"
            },
            "values": {
              "Type": "Set",
              "Required": true,
              "Description": "List of strings (which will be treated as an OR filter on the property)",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            }
          }
        }
      },
      "grid": {
        "Type": "List",
        "Optional": true,
        "Description": "Grid dashboard layout. Charts listed will be placed in a grid by row with the same width and height. If a chart can't fit in a row, it will be placed automatically in the next row",
        "ConflictsWith": [
          "column",
          "chart"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "chart_ids": {
              "Type": "List",
              "Required": true,
              "Description": "Charts to use for the grid",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "height": {
              "Type": "Int",
              "Optional": true,
              "Description": "How many rows each chart should take up. (greater than or equal to 1)",
              "Default": {
                "Type": "int",
                "Value": "1"
              }
            },
            "width": {
              "Type": "Int",
              "Optional": true,
              "Description": "Number of columns (out of a total of 12, one-based) each chart should take up. (between 1 and 12)",
              "Default": {
                "Type": "int",
                "Value": "12"
              }
            }
          }
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the dashboard"
      },
      "selected_event_overlay": {
        "Type": "List",
        "Optional": true,
        "Description": "Event overlay added to charts by default to charts",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "signal": {
              "Type": "String",
              "Required": true,
              "Description": "Search term used to define events"
            },
            "source": {
              "Type": "List",
              "Optional": true,
              "IsBlock": true,
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "negated": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "(false by default) Whether this filter should be a \"not\" filter",
                    "Default": {
                      "Type": "bool",
                      "Value": "false"
                    }
                  },
                  "property": {
                    "Type": "String",
                    "Required": true,
                    "Description": "A metric time series dimension or property name"
                  },
                  "values": {
                    "Type": "Set",
                    "Required": true,
                    "Description": "List of strings (which will be treated as an OR filter on the property)",
                    "Elem": {
                      "Type": "SchemaElements",
                      "ElementsType": "String"
                    }
                  }
                }
              }
            },
            "type": {
              "Type": "String",
              "Optional": true,
              "Description": "Source for this event's data. Can be \"eventTimeSeries\" (default) or \"detectorEvents\".",
              "Default": {
                "Type": "string",
                "Value": "eventTimeSeries"
              }
            }
          }
        }
      },
      "start_time": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds since epoch to start the visualization",
        "ConflictsWith": [
          "time_range"
        ]
      },
      "time_range": {
        "Type": "String",
        "Optional": true,
        "Description": "From when to display data. SignalFx time syntax (e.g. -5m, -1h)",
        "ConflictsWith": [
          "start_time",
          "end_time"
        ]
      },
      "url": {
        "Type": "String",
        "Description": "URL of the dashboard",
        "Computed": true
      },
      "variable": {
        "Type": "Set",
        "Optional": true,
        "Description": "Dashboard variable to apply to each chart in the dashboard",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "alias": {
              "Type": "String",
              "Required": true,
              "Description": "An alias for the dashboard variable. This text will appear as the label for the dropdown field on the dashboard"
            },
            "apply_if_exist": {
              "Type": "Bool",
              "Optional": true,
              "Description": "If true, this variable will also match data that does not have the specified property",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "description": {
              "Type": "String",
              "Optional": true,
              "Description": "Variable description"
            },
            "property": {
              "Type": "String",
              "Required": true,
              "Description": "A metric time series dimension or property name"
            },
            "replace_only": {
              "Type": "Bool",
              "Optional": true,
              "Description": "If true, this variable will only apply to charts with a filter on the named property.",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "restricted_suggestions": {
              "Type": "Bool",
              "Optional": true,
              "Description": "If true, this variable may only be set to the values listed in preferredSuggestions. and only these values will appear in autosuggestion menus. false by default",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "value_required": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Determines whether a value is required for this variable (and therefore whether it will be possible to view this dashboard without this filter applied). false by default",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "values": {
              "Type": "Set",
              "Optional": true,
              "Description": "List of strings (which will be treated as an OR filter on the property)",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "values_suggested": {
              "Type": "Set",
              "Optional": true,
              "Description": "A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            }
          }
        }
      }
    },
    "signalfx_dashboard_group": {
      "authorized_writer_teams": {
        "Type": "Set",
        "Optional": true,
        "Description": "Team IDs that have write access to this dashboard",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "authorized_writer_users": {
        "Type": "Set",
        "Optional": true,
        "Description": "User IDs that have write access to this dashboard",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "dashboard": {
        "Type": "List",
        "Optional": true,
        "Description": "Dashboard IDs that are members of this dashboard group. Also handles 'mirrored' dashboards.",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "dashboard_id": {
              "Type": "String",
              "Required": true,
              "Description": "The label used in the publish statement that displays the plot (metric time series data) you want to customize"
            },
            "description_override": {
              "Type": "String",
              "Optional": true,
              "Description": "String that provides a description override for a mirrored dashboard"
            },
            "filter_override": {
              "Type": "Set",
              "Optional": true,
              "Description": "Filter to apply to each chart in the dashboard",
              "IsBlock": true,
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "negated": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "(false by default) Whether this filter should be a \"not\" filter",
                    "Default": {
                      "Type": "bool",
                      "Value": "false"
                    }
                  },
                  "property": {
                    "Type": "String",
                    "Required": true,
                    "Description": "A metric time series dimension or property name"
                  },
                  "values": {
                    "Type": "Set",
                    "Required": true,
                    "Description": "List of strings (which will be treated as an OR filter on the property)",
                    "Elem": {
                      "Type": "SchemaElements",
                      "ElementsType": "String"
                    }
                  }
                }
              }
            },
            "name_override": {
              "Type": "String",
              "Optional": true,
              "Description": "String that provides a name override for a mirrored dashboard"
            },
            "variable_override": {
              "Type": "Set",
              "Optional": true,
              "Description": "Dashboard variable to apply to each chart in the dashboard",
              "IsBlock": true,
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "property": {
                    "Type": "String",
                    "Required": true,
                    "Description": "A metric time series dimension or property name"
                  },
                  "values": {
                    "Type": "Set",
                    "Optional": true,
                    "Description": "List of strings (which will be treated as an OR filter on the property)",
                    "Elem": {
                      "Type": "SchemaElements",
                      "ElementsType": "String"
                    }
                  },
                  "values_suggested": {
                    "Type": "Set",
                    "Optional": true,
                    "Description": "A list of strings of suggested values for this variable; these suggestions will receive priority when values are autosuggested for this variable",
                    "Elem": {
                      "Type": "SchemaElements",
                      "ElementsType": "String"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Description of the dashboard group"
      },
      "import_qualifier": {
        "Type": "Set",
        "Optional": true,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "filters": {
              "Type": "Set",
              "Optional": true,
              "Description": "Filter to apply to each chart in the dashboard",
              "IsBlock": true,
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "negated": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "(false by default) Whether this filter should be a \"not\" filter",
                    "Default": {
                      "Type": "bool",
                      "Value": "false"
                    }
                  },
                  "property": {
                    "Type": "String",
                    "Required": true,
                    "Description": "A metric time series dimension or property name"
                  },
                  "values": {
                    "Type": "Set",
                    "Required": true,
                    "Description": "List of strings (which will be treated as an OR filter on the property)",
                    "Elem": {
                      "Type": "SchemaElements",
                      "ElementsType": "String"
                    }
                  }
                }
              }
            },
            "metric": {
              "Type": "String",
              "Required": true
            }
          }
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the dashboard group"
      },
      "teams": {
        "Type": "List",
        "Optional": true,
        "Description": "Team IDs to associate the dashboard group to",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      }
    },
    "signalfx_data_link": {
      "context_dashboard_id": {
        "Type": "String",
        "Optional": true,
        "Description": "The dashobard ID to which this data link will be applied"
      },
      "property_name": {
        "Type": "String",
        "Optional": true,
        "Description": "Name (key) of the metadata that's the trigger of a data link. If you specify `property_value`, you must specify `property_name`."
      },
      "property_value": {
        "Type": "String",
        "Optional": true,
        "Description": "Value of the metadata that's the trigger of a data link. If you specify this property, you must also specify `property_name`."
      },
      "target_external_url": {
        "Type": "Set",
        "Optional": true,
        "Description": "Link to an external URL",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "is_default": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Flag that designates a target as the default for a data link object.",
              "Default": {
                "Type": "bool",
                "Value": "true"
              }
            },
            "minimum_time_window": {
              "Type": "String",
              "Optional": true,
              "Description": "The minimum time window for a search sent to an external site. Depends on the value set for `time_format`.",
              "Default": {
                "Type": "string",
                "Value": "6000"
              }
            },
            "name": {
              "Type": "String",
              "Required": true,
              "Description": "User-assigned target name. Use this value to differentiate between the link targets for a data link object."
            },
            "property_key_mapping": {
              "Type": "Map",
              "Optional": true,
              "Description": "Describes the relationship between SignalFx metadata keys and external system properties when the key names are different",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "time_format": {
              "Type": "String",
              "Optional": true,
              "Description": "Designates the format of minimumTimeWindow in the same data link target object.",
              "Default": {
                "Type": "datalink.TimeFormat",
                "Value": "ISO8601"
              }
            },
            "url": {
              "Type": "String",
              "Required": true,
              "Description": "URL string for a Splunk instance or external system data link target."
            }
          }
        }
      },
      "target_signalfx_dashboard": {
        "Type": "Set",
        "Optional": true,
        "Description": "Link to a SignalFx dashboard",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "dashboard_group_id": {
              "Type": "String",
              "Required": true,
              "Description": "SignalFx-assigned ID of the dashboard link target's dashboard group"
            },
            "dashboard_id": {
              "Type": "String",
              "Required": true,
              "Description": "SignalFx-assigned ID of the dashboard link target"
            },
            "is_default": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Flag that designates a target as the default for a data link object.",
              "Default": {
                "Type": "bool",
                "Value": "true"
              }
            },
            "name": {
              "Type": "String",
              "Required": true,
              "Description": "User-assigned target name. Use this value to differentiate between the link targets for a data link object."
            }
          }
        }
      },
      "target_splunk": {
        "Type": "Set",
        "Optional": true,
        "Description": "Link to a Splunk instance",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "is_default": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Flag that designates a target as the default for a data link object.",
              "Default": {
                "Type": "bool",
                "Value": "true"
              }
            },
            "name": {
              "Type": "String",
              "Required": true,
              "Description": "User-assigned target name. Use this value to differentiate between the link targets for a data link object."
            },
            "property_key_mapping": {
              "Type": "Map",
              "Optional": true,
              "Description": "Describes the relationship between SignalFx metadata keys and external system properties when the key names are different",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            }
          }
        }
      }
    },
    "signalfx_detector": {
      "authorized_writer_teams": {
        "Type": "Set",
        "Optional": true,
        "Description": "Team IDs that have write access to this dashboard",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "authorized_writer_users": {
        "Type": "Set",
        "Optional": true,
        "Description": "User IDs that have write access to this dashboard",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Description of the detector"
      },
      "disable_sampling": {
        "Type": "Bool",
        "Optional": true,
        "Description": "(false by default) When false, samples a subset of the output MTS in the visualization."
      },
      "end_time": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds since epoch. Used for visualization",
        "ConflictsWith": [
          "time_range"
        ]
      },
      "max_delay": {
        "Type": "Int",
        "Optional": true,
        "Description": "How long (in seconds) to wait for late datapoints. Max value 900 (15m)",
        "Default": {
          "Type": "int",
          "Value": "0"
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the detector"
      },
      "program_text": {
        "Type": "String",
        "Required": true,
        "Description": "Signalflow program text for the detector. More info at \"https://developers.signalfx.com/docs/signalflow-overview\""
      },
      "rule": {
        "Type": "Set",
        "Required": true,
        "Description": "Set of rules used for alerting",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "description": {
              "Type": "String",
              "Optional": true,
              "Description": "Description of the rule"
            },
            "detect_label": {
              "Type": "String",
              "Required": true,
              "Description": "A detect label which matches a detect label within the program text"
            },
            "disabled": {
              "Type": "Bool",
              "Optional": true,
              "Description": "(default: false) When true, notifications and events will not be generated for the detect label",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "notifications": {
              "Type": "List",
              "Optional": true,
              "Description": "List of strings specifying where notifications will be sent when an incident occurs. See https://developers.signalfx.com/v2/docs/detector-model#notifications-models for more info",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "parameterized_body": {
              "Type": "String",
              "Optional": true,
              "Description": "Custom notification message body when an alert is triggered. See https://developers.signalfx.com/v2/reference#detector-model for more info"
            },
            "parameterized_subject": {
              "Type": "String",
              "Optional": true,
              "Description": "Custom notification message subject when an alert is triggered. See https://d    evelopers.signalfx.com/v2/reference#detector-model for more info"
            },
            "runbook_url": {
              "Type": "String",
              "Optional": true,
              "Description": "URL of page to consult when an alert is triggered"
            },
            "severity": {
              "Type": "String",
              "Required": true,
              "Description": "The severity of the rule, must be one of: Critical, Warning, Major, Minor, Info"
            },
            "tip": {
              "Type": "String",
              "Optional": true,
              "Description": "Plain text suggested first course of action, such as a command to execute."
            }
          }
        }
      },
      "show_data_markers": {
        "Type": "Bool",
        "Optional": true,
        "Description": "(true by default) When true, markers will be drawn for each datapoint within the visualization.",
        "Default": {
          "Type": "bool",
          "Value": "true"
        }
      },
      "show_event_lines": {
        "Type": "Bool",
        "Optional": true,
        "Description": "(false by default) When true, vertical lines will be drawn for each triggered event within the visualization."
      },
      "start_time": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds since epoch. Used for visualization",
        "ConflictsWith": [
          "time_range"
        ]
      },
      "teams": {
        "Type": "List",
        "Optional": true,
        "Description": "Team IDs to associate the detector to",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "time_range": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults to 3600",
        "ConflictsWith": [
          "start_time",
          "end_time"
        ],
        "Default": {
          "Type": "int",
          "Value": "3600"
        }
      },
      "url": {
        "Type": "String",
        "Description": "URL of the detector",
        "Computed": true
      },
      "viz_options": {
        "Type": "Set",
        "Optional": true,
        "Description": "Plot-level customization options, associated with a publish statement",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "color": {
              "Type": "String",
              "Optional": true,
              "Description": "Color to use"
            },
            "display_name": {
              "Type": "String",
              "Optional": true,
              "Description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart."
            },
            "label": {
              "Type": "String",
              "Required": true,
              "Description": "The label used in the publish statement that displays the plot (metric time series data) you want to customize"
            },
            "value_prefix": {
              "Type": "String",
              "Optional": true,
              "Description": "An arbitrary prefix to display with the value of this plot"
            },
            "value_suffix": {
              "Type": "String",
              "Optional": true,
              "Description": "An arbitrary suffix to display with the value of this plot"
            },
            "value_unit": {
              "Type": "String",
              "Optional": true,
              "Description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)"
            }
          }
        }
      }
    },
    "signalfx_event_feed_chart": {
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Description of the chart (Optional)"
      },
      "end_time": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds since epoch to end the visualization",
        "ConflictsWith": [
          "time_range"
        ]
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the chart"
      },
      "program_text": {
        "Type": "String",
        "Required": true,
        "Description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\""
      },
      "start_time": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds since epoch to start the visualization",
        "ConflictsWith": [
          "time_range"
        ]
      },
      "time_range": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`",
        "ConflictsWith": [
          "start_time",
          "end_time"
        ]
      },
      "url": {
        "Type": "String",
        "Description": "URL of the chart",
        "Computed": true
      }
    },
    "signalfx_gcp_integration": {
      "enabled": {
        "Type": "Bool",
        "Required": true,
        "Description": "Whether the integration is enabled or not"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the integration"
      },
      "poll_rate": {
        "Type": "Int",
        "Optional": true,
        "Description": "GCP poll rate"
      },
      "project_service_keys": {
        "Type": "Set",
        "Optional": true,
        "Description": "GCP project service keys",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "project_id": {
              "Type": "String",
              "Required": true
            },
            "project_key": {
              "Type": "String",
              "Required": true
            }
          }
        }
      },
      "services": {
        "Type": "Set",
        "Optional": true,
        "Description": "GCP enabled services",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      }
    },
    "signalfx_heatmap_chart": {
      "color_range": {
        "Type": "Set",
        "Optional": true,
        "Description": "Values and color for the color range. Example: colorRange : { min : 0, max : 100, color : \"#0000ff\" }",
        "MaxItems": 1,
        "ConflictsWith": [
          "color_scale"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "color": {
              "Type": "String",
              "Required": true,
              "Description": "The color range to use. The starting hex color value for data values in a heatmap chart. Specify the value as a 6-character hexadecimal value preceded by the '#' character, for example \"#ea1849\" (grass green)."
            },
            "max_value": {
              "Type": "Float",
              "Optional": true,
              "Description": "The maximum value within the coloring range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            },
            "min_value": {
              "Type": "Float",
              "Optional": true,
              "Description": "The minimum value within the coloring range",
              "Default": {
                "Type": "float64",
                "Value": "-3.4028234663852886e+38"
              }
            }
          }
        }
      },
      "color_scale": {
        "Type": "Set",
        "Optional": true,
        "Description": "Single color range including both the color to display for that range and the borders of the range",
        "ConflictsWith": [
          "color_range"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "color": {
              "Type": "String",
              "Required": true,
              "Description": "The color to use. Must be either \"gray\", \"blue\", \"navy\", \"orange\", \"yellow\", \"magenta\", \"purple\", \"violet\", \"lilac\", \"green\", \"aquamarine\""
            },
            "gt": {
              "Type": "Float",
              "Optional": true,
              "Description": "Indicates the lower threshold non-inclusive value for this range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            },
            "gte": {
              "Type": "Float",
              "Optional": true,
              "Description": "Indicates the lower threshold inclusive value for this range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            },
            "lt": {
              "Type": "Float",
              "Optional": true,
              "Description": "Indicates the upper threshold non-inculsive value for this range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            },
            "lte": {
              "Type": "Float",
              "Optional": true,
              "Description": "Indicates the upper threshold inclusive value for this range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            }
          }
        }
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Description of the chart (Optional)"
      },
      "disable_sampling": {
        "Type": "Bool",
        "Optional": true,
        "Description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance",
        "Default": {
          "Type": "bool",
          "Value": "false"
        }
      },
      "group_by": {
        "Type": "List",
        "Optional": true,
        "Description": "Properties to group by in the heatmap (in nesting order)",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "hide_timestamp": {
        "Type": "Bool",
        "Optional": true,
        "Description": "(false by default) Whether to show the timestamp in the chart",
        "Default": {
          "Type": "bool",
          "Value": "false"
        }
      },
      "max_delay": {
        "Type": "Int",
        "Optional": true,
        "Description": "How long (in seconds) to wait for late datapoints"
      },
      "minimum_resolution": {
        "Type": "Int",
        "Optional": true,
        "Description": "The minimum resolution (in seconds) to use for computing the underlying program"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the chart"
      },
      "program_text": {
        "Type": "String",
        "Required": true,
        "Description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\""
      },
      "refresh_interval": {
        "Type": "Int",
        "Optional": true,
        "Description": "How often (in seconds) to refresh the values of the heatmap"
      },
      "sort_by": {
        "Type": "String",
        "Optional": true,
        "Description": "The property to use when sorting the elements. Must be prepended with + for ascending or - for descending (e.g. -foo)"
      },
      "unit_prefix": {
        "Type": "String",
        "Optional": true,
        "Description": "(Metric by default) Must be \"Metric\" or \"Binary\"",
        "Default": {
          "Type": "string",
          "Value": "Metric"
        }
      },
      "url": {
        "Type": "String",
        "Description": "URL of the chart",
        "Computed": true
      }
    },
    "signalfx_jira_integration": {
      "api_token": {
        "Type": "String",
        "Optional": true,
        "Description": "The API token for the user email",
        "ConflictsWith": [
          "username",
          "password"
        ]
      },
      "assignee_display_name": {
        "Type": "String",
        "Optional": true,
        "Description": "Jira display name for the assignee"
      },
      "assignee_name": {
        "Type": "String",
        "Required": true,
        "Description": "Jira user name for the assignee"
      },
      "auth_method": {
        "Type": "String",
        "Required": true,
        "Description": "Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`"
      },
      "base_url": {
        "Type": "String",
        "Required": true,
        "Description": "Base URL of the Jira instance that's integrated with SignalFx."
      },
      "enabled": {
        "Type": "Bool",
        "Required": true,
        "Description": "Whether the integration is enabled or not"
      },
      "issue_type": {
        "Type": "String",
        "Required": true,
        "Description": "Issue type (for example, Story) for tickets that Jira creates for detector notifications. SignalFx validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the integration"
      },
      "password": {
        "Type": "String",
        "Optional": true,
        "Description": "Password used to authenticate the Jira integration.",
        "ConflictsWith": [
          "user_email",
          "api_token"
        ]
      },
      "project_key": {
        "Type": "String",
        "Required": true,
        "Description": "Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to this project."
      },
      "user_email": {
        "Type": "String",
        "Optional": true,
        "Description": "Email address used to authenticate the Jira integration.",
        "ConflictsWith": [
          "username",
          "password"
        ]
      },
      "username": {
        "Type": "String",
        "Optional": true,
        "Description": "User name used to authenticate the Jira integration.",
        "ConflictsWith": [
          "user_email",
          "api_token"
        ]
      }
    },
    "signalfx_list_chart": {
      "color_by": {
        "Type": "String",
        "Optional": true,
        "Description": "(Metric by default) Must be \"Scale\", \"Metric\" or \"Dimension\"",
        "Default": {
          "Type": "string",
          "Value": "Dimension"
        }
      },
      "color_scale": {
        "Type": "Set",
        "Optional": true,
        "Description": "Single color range including both the color to display for that range and the borders of the range",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "color": {
              "Type": "String",
              "Required": true,
              "Description": "The color to use. Must be either \"gray\", \"blue\", \"navy\", \"orange\", \"yellow\", \"magenta\", \"purple\", \"violet\", \"lilac\", \"green\", \"aquamarine\""
            },
            "gt": {
              "Type": "Float",
              "Optional": true,
              "Description": "Indicates the lower threshold non-inclusive value for this range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            },
            "gte": {
              "Type": "Float",
              "Optional": true,
              "Description": "Indicates the lower threshold inclusive value for this range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            },
            "lt": {
              "Type": "Float",
              "Optional": true,
              "Description": "Indicates the upper threshold non-inculsive value for this range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            },
            "lte": {
              "Type": "Float",
              "Optional": true,
              "Description": "Indicates the upper threshold inclusive value for this range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            }
          }
        }
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Description of the chart (Optional)"
      },
      "disable_sampling": {
        "Type": "Bool",
        "Optional": true,
        "Description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance",
        "Default": {
          "Type": "bool",
          "Value": "false"
        }
      },
      "end_time": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds since epoch to end the visualization",
        "ConflictsWith": [
          "time_range"
        ]
      },
      "legend_fields_to_hide": {
        "Type": "Set",
        "Optional": true,
        "Description": "List of properties that shouldn't be displayed in the chart legend (i.e. dimension names)",
        "ConflictsWith": [
          "legend_options_fields"
        ],
        "Deprecated": "Please use legend_options_fields",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "legend_options_fields": {
        "Type": "List",
        "Optional": true,
        "Description": "List of property and enabled flags to control the order and presence of datatable labels in a chart.",
        "ConflictsWith": [
          "legend_fields_to_hide"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "enabled": {
              "Type": "Bool",
              "Optional": true,
              "Description": "(true by default) Determines if this property is displayed in the data table.",
              "Default": {
                "Type": "bool",
                "Value": "true"
              }
            },
            "property": {
              "Type": "String",
              "Required": true,
              "Description": "The name of a property to hide or show in the data table."
            }
          }
        }
      },
      "max_delay": {
        "Type": "Int",
        "Optional": true,
        "Description": "How long (in seconds) to wait for late datapoints"
      },
      "max_precision": {
        "Type": "Int",
        "Optional": true,
        "Description": "Maximum number of digits to display when rounding values up or down"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the chart"
      },
      "program_text": {
        "Type": "String",
        "Required": true,
        "Description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\""
      },
      "refresh_interval": {
        "Type": "Int",
        "Optional": true,
        "Description": "How often (in seconds) to refresh the values of the list"
      },
      "secondary_visualization": {
        "Type": "String",
        "Optional": true,
        "Description": "(false by default) What kind of secondary visualization to show (None, Radial, Linear, Sparkline)",
        "Default": {
          "Type": "string",
          "Value": "Sparkline"
        }
      },
      "sort_by": {
        "Type": "String",
        "Optional": true,
        "Description": "The property to use when sorting the elements. Use 'value' if you want to sort by value. Must be prepended with + for ascending or - for descending (e.g. -foo)"
      },
      "start_time": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds since epoch to start the visualization",
        "ConflictsWith": [
          "time_range"
        ]
      },
      "time_range": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`",
        "ConflictsWith": [
          "start_time",
          "end_time"
        ]
      },
      "unit_prefix": {
        "Type": "String",
        "Optional": true,
        "Description": "(Metric by default) Must be \"Metric\" or \"Binary\"",
        "Default": {
          "Type": "string",
          "Value": "Metric"
        }
      },
      "url": {
        "Type": "String",
        "Description": "URL of the chart",
        "Computed": true
      },
      "viz_options": {
        "Type": "Set",
        "Optional": true,
        "Description": "Plot-level customization options, associated with a publish statement",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "color": {
              "Type": "String",
              "Optional": true,
              "Description": "Color to use"
            },
            "display_name": {
              "Type": "String",
              "Optional": true,
              "Description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart."
            },
            "label": {
              "Type": "String",
              "Required": true,
              "Description": "The label used in the publish statement that displays the plot (metric time series data) you want to customize"
            },
            "value_prefix": {
              "Type": "String",
              "Optional": true,
              "Description": "An arbitrary prefix to display with the value of this plot"
            },
            "value_suffix": {
              "Type": "String",
              "Optional": true,
              "Description": "An arbitrary suffix to display with the value of this plot"
            },
            "value_unit": {
              "Type": "String",
              "Optional": true,
              "Description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)"
            }
          }
        }
      }
    },
    "signalfx_opsgenie_integration": {
      "api_key": {
        "Type": "String",
        "Required": true,
        "Description": "Opsgenie API key"
      },
      "api_url": {
        "Type": "String",
        "Optional": true,
        "Description": "Opsgenie API URL for integration"
      },
      "enabled": {
        "Type": "Bool",
        "Required": true,
        "Description": "Whether the integration is enabled or not"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the integration"
      }
    },
    "signalfx_org_token": {
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Description of the token (Optional)"
      },
      "disabled": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Flag that controls enabling the token. If set to `true`, the token is disabled, and you can't use it for authentication. Defaults to `false`",
        "Default": {
          "Type": "bool",
          "Value": "false"
        }
      },
      "dpm_limits": {
        "Type": "Set",
        "Optional": true,
        "MaxItems": 1,
        "ConflictsWith": [
          "host_or_usage_limits"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "dpm_limit": {
              "Type": "Int",
              "Required": true,
              "Description": "The datapoints per minute (dpm) limit for this token. If you exceed this limit, SignalFx sends out an alert."
            },
            "dpm_notification_threshold": {
              "Type": "Int",
              "Optional": true,
              "Description": "DPM level at which SignalFx sends the notification for this token. If you don't specify a notification, SignalFx sends the generic notification.",
              "Default": {
                "Type": "int",
                "Value": "-1"
              }
            }
          }
        }
      },
      "host_or_usage_limits": {
        "Type": "Set",
        "Optional": true,
        "MaxItems": 1,
        "ConflictsWith": [
          "dpm_limits"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "container_limit": {
              "Type": "Int",
              "Optional": true,
              "Description": "Max number of containers that can use this token",
              "Default": {
                "Type": "int",
                "Value": "-1"
              }
            },
            "container_notification_threshold": {
              "Type": "Int",
              "Optional": true,
              "Description": "Notification threshold for containers",
              "Default": {
                "Type": "int",
                "Value": "-1"
              }
            },
            "custom_metrics_limit": {
              "Type": "Int",
              "Optional": true,
              "Description": "Max number of custom metrics that can be sent with this token",
              "Default": {
                "Type": "int",
                "Value": "-1"
              }
            },
            "custom_metrics_notification_threshold": {
              "Type": "Int",
              "Optional": true,
              "Description": "Notification threshold for custom metrics",
              "Default": {
                "Type": "int",
                "Value": "-1"
              }
            },
            "high_res_metrics_limit": {
              "Type": "Int",
              "Optional": true,
              "Description": "Max number of high-res metrics that can be sent with this token",
              "Default": {
                "Type": "int",
                "Value": "-1"
              }
            },
            "high_res_metrics_notification_threshold": {
              "Type": "Int",
              "Optional": true,
              "Description": "Notification threshold for high-res metrics",
              "Default": {
                "Type": "int",
                "Value": "-1"
              }
            },
            "host_limit": {
              "Type": "Int",
              "Optional": true,
              "Description": "Max number of hosts that can use this token",
              "Default": {
                "Type": "int",
                "Value": "-1"
              }
            },
            "host_notification_threshold": {
              "Type": "Int",
              "Optional": true,
              "Description": "Notification threshold for hosts",
              "Default": {
                "Type": "int",
                "Value": "-1"
              }
            }
          }
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the token"
      },
      "notifications": {
        "Type": "List",
        "Optional": true,
        "Description": "List of strings specifying where notifications will be sent when an incident occurs. See https://developers.signalfx.com/v2/docs/detector-model#notifications-models for more info",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      }
    },
    "signalfx_pagerduty_integration": {
      "api_key": {
        "Type": "String",
        "Optional": true,
        "Description": "PagerDuty API key"
      },
      "enabled": {
        "Type": "Bool",
        "Required": true,
        "Description": "Whether the integration is enabled or not"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the integration"
      }
    },
    "signalfx_single_value_chart": {
      "color_by": {
        "Type": "String",
        "Optional": true,
        "Description": "(Metric by default) Must be \"Metric\", \"Dimension\", or \"Scale\". \"Scale\" maps to Color by Value in the UI",
        "Default": {
          "Type": "string",
          "Value": "Metric"
        }
      },
      "color_scale": {
        "Type": "Set",
        "Optional": true,
        "Description": "Single color range including both the color to display for that range and the borders of the range",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "color": {
              "Type": "String",
              "Required": true,
              "Description": "The color to use. Must be either \"gray\", \"blue\", \"navy\", \"orange\", \"yellow\", \"magenta\", \"purple\", \"violet\", \"lilac\", \"green\", \"aquamarine\""
            },
            "gt": {
              "Type": "Float",
              "Optional": true,
              "Description": "Indicates the lower threshold non-inclusive value for this range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            },
            "gte": {
              "Type": "Float",
              "Optional": true,
              "Description": "Indicates the lower threshold inclusive value for this range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            },
            "lt": {
              "Type": "Float",
              "Optional": true,
              "Description": "Indicates the upper threshold non-inculsive value for this range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            },
            "lte": {
              "Type": "Float",
              "Optional": true,
              "Description": "Indicates the upper threshold inclusive value for this range",
              "Default": {
                "Type": "float64",
                "Value": "3.4028234663852886e+38"
              }
            }
          }
        }
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Description of the chart (Optional)"
      },
      "is_timestamp_hidden": {
        "Type": "Bool",
        "Optional": true,
        "Description": "(false by default) Whether to hide the timestamp in the chart",
        "Default": {
          "Type": "bool",
          "Value": "false"
        }
      },
      "max_delay": {
        "Type": "Int",
        "Optional": true,
        "Description": "How long (in seconds) to wait for late datapoints"
      },
      "max_precision": {
        "Type": "Int",
        "Optional": true,
        "Description": "The maximum precision to for values displayed in the list"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the chart"
      },
      "program_text": {
        "Type": "String",
        "Required": true,
        "Description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\""
      },
      "refresh_interval": {
        "Type": "Int",
        "Optional": true,
        "Description": "How often (in seconds) to refresh the values of the list"
      },
      "secondary_visualization": {
        "Type": "String",
        "Optional": true,
        "Description": "(false by default) What kind of secondary visualization to show (None, Radial, Linear, Sparkline)",
        "Default": {
          "Type": "string",
          "Value": "None"
        }
      },
      "show_spark_line": {
        "Type": "Bool",
        "Optional": true,
        "Description": "(false by default) Whether to show a trend line below the current value",
        "Default": {
          "Type": "bool",
          "Value": "false"
        }
      },
      "unit_prefix": {
        "Type": "String",
        "Optional": true,
        "Description": "(Metric by default) Must be \"Metric\" or \"Binary\"",
        "Default": {
          "Type": "string",
          "Value": "Metric"
        }
      },
      "url": {
        "Type": "String",
        "Description": "URL of the chart",
        "Computed": true
      },
      "viz_options": {
        "Type": "Set",
        "Optional": true,
        "Description": "Plot-level customization options, associated with a publish statement",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "color": {
              "Type": "String",
              "Optional": true,
              "Description": "Color to use"
            },
            "display_name": {
              "Type": "String",
              "Optional": true,
              "Description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart."
            },
            "label": {
              "Type": "String",
              "Required": true,
              "Description": "The label used in the publish statement that displays the plot (metric time series data) you want to customize"
            },
            "value_prefix": {
              "Type": "String",
              "Optional": true,
              "Description": "An arbitrary prefix to display with the value of this plot"
            },
            "value_suffix": {
              "Type": "String",
              "Optional": true,
              "Description": "An arbitrary suffix to display with the value of this plot"
            },
            "value_unit": {
              "Type": "String",
              "Optional": true,
              "Description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)"
            }
          }
        }
      }
    },
    "signalfx_slack_integration": {
      "enabled": {
        "Type": "Bool",
        "Required": true,
        "Description": "Whether the integration is enabled or not"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the integration"
      },
      "webhook_url": {
        "Type": "String",
        "Required": true,
        "Description": "Slack Webhook URL for integration"
      }
    },
    "signalfx_team": {
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Description of the team (Optional)"
      },
      "members": {
        "Type": "Set",
        "Optional": true,
        "Description": "Members of team",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the team"
      },
      "notifications_critical": {
        "Type": "List",
        "Optional": true,
        "Description": "List of notification destinations to use for the critical alerts category.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "notifications_default": {
        "Type": "List",
        "Optional": true,
        "Description": "List of notification destinations to use for the default alerts category.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "notifications_info": {
        "Type": "List",
        "Optional": true,
        "Description": "List of notification destinations to use for the info alerts category.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "notifications_major": {
        "Type": "List",
        "Optional": true,
        "Description": "List of notification destinations to use for the major alerts category.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "notifications_minor": {
        "Type": "List",
        "Optional": true,
        "Description": "List of notification destinations to use for the minor alerts category.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "notifications_warning": {
        "Type": "List",
        "Optional": true,
        "Description": "List of notification destinations to use for the warning alerts category.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "url": {
        "Type": "String",
        "Description": "URL of the team",
        "Computed": true
      }
    },
    "signalfx_text_chart": {
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Description of the chart (Optional)"
      },
      "markdown": {
        "Type": "String",
        "Required": true,
        "Description": "Markdown text to display. More info at: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the chart"
      },
      "url": {
        "Type": "String",
        "Description": "URL of the chart",
        "Computed": true
      }
    },
    "signalfx_time_chart": {
      "axes_include_zero": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Force y-axes to always show zero"
      },
      "axes_precision": {
        "Type": "Int",
        "Optional": true,
        "Description": "Force a specific number of significant digits in the y-axis",
        "Default": {
          "Type": "int",
          "Value": "3"
        }
      },
      "axis_left": {
        "Type": "Set",
        "Optional": true,
        "MaxItems": 1,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "high_watermark": {
              "Type": "Float",
              "Optional": true,
              "Description": "A line to draw as a high watermark",
              "Default": {
                "Type": "float64",
                "Value": "1.7976931348623157e+308"
              }
            },
            "high_watermark_label": {
              "Type": "String",
              "Optional": true,
              "Description": "A label to attach to the high watermark line"
            },
            "label": {
              "Type": "String",
              "Optional": true,
              "Description": "Label of the left axis"
            },
            "low_watermark": {
              "Type": "Float",
              "Optional": true,
              "Description": "A line to draw as a low watermark",
              "Default": {
                "Type": "float64",
                "Value": "-1.7976931348623157e+308"
              }
            },
            "low_watermark_label": {
              "Type": "String",
              "Optional": true,
              "Description": "A label to attach to the low watermark line"
            },
            "max_value": {
              "Type": "Float",
              "Optional": true,
              "Description": "The maximum value for the left axis",
              "Default": {
                "Type": "float64",
                "Value": "1.7976931348623157e+308"
              }
            },
            "min_value": {
              "Type": "Float",
              "Optional": true,
              "Description": "The minimum value for the left axis",
              "Default": {
                "Type": "float64",
                "Value": "-1.7976931348623157e+308"
              }
            },
            "watermarks": {
              "Type": "Set",
              "Optional": true,
              "IsBlock": true,
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "label": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "Label to display associated with the watermark line"
                  },
                  "value": {
                    "Type": "Float",
                    "Required": true,
                    "Description": "Axis value where the watermark line will be displayed"
                  }
                }
              }
            }
          }
        }
      },
      "axis_right": {
        "Type": "Set",
        "Optional": true,
        "MaxItems": 1,
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "high_watermark": {
              "Type": "Float",
              "Optional": true,
              "Description": "A line to draw as a high watermark",
              "Default": {
                "Type": "float64",
                "Value": "1.7976931348623157e+308"
              }
            },
            "high_watermark_label": {
              "Type": "String",
              "Optional": true,
              "Description": "A label to attach to the high watermark line"
            },
            "label": {
              "Type": "String",
              "Optional": true,
              "Description": "Label of the right axis"
            },
            "low_watermark": {
              "Type": "Float",
              "Optional": true,
              "Description": "A line to draw as a low watermark",
              "Default": {
                "Type": "float64",
                "Value": "-1.7976931348623157e+308"
              }
            },
            "low_watermark_label": {
              "Type": "String",
              "Optional": true,
              "Description": "A label to attach to the low watermark line"
            },
            "max_value": {
              "Type": "Float",
              "Optional": true,
              "Description": "The maximum value for the right axis",
              "Default": {
                "Type": "float64",
                "Value": "1.7976931348623157e+308"
              }
            },
            "min_value": {
              "Type": "Float",
              "Optional": true,
              "Description": "The minimum value for the right axis",
              "Default": {
                "Type": "float64",
                "Value": "-1.7976931348623157e+308"
              }
            },
            "watermarks": {
              "Type": "Set",
              "Optional": true,
              "IsBlock": true,
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "label": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "Label to display associated with the watermark line"
                  },
                  "value": {
                    "Type": "Float",
                    "Required": true,
                    "Description": "Axis value where the watermark line will be displayed"
                  }
                }
              }
            }
          }
        }
      },
      "color_by": {
        "Type": "String",
        "Optional": true,
        "Description": "(Dimension by default) Must be \"Dimension\" or \"Metric\"",
        "Default": {
          "Type": "string",
          "Value": "Dimension"
        }
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Description of the chart"
      },
      "disable_sampling": {
        "Type": "Bool",
        "Optional": true,
        "Description": "(false by default) If false, samples a subset of the output MTS, which improves UI performance",
        "Default": {
          "Type": "bool",
          "Value": "false"
        }
      },
      "end_time": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds since epoch to end the visualization",
        "ConflictsWith": [
          "time_range"
        ]
      },
      "event_options": {
        "Type": "Set",
        "Optional": true,
        "Description": "Event display customization options, associated with a publish statement",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "color": {
              "Type": "String",
              "Optional": true,
              "Description": "Color to use"
            },
            "display_name": {
              "Type": "String",
              "Optional": true,
              "Description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart."
            },
            "label": {
              "Type": "String",
              "Required": true,
              "Description": "The label used in the publish statement that displays the events you want to customize"
            }
          }
        }
      },
      "histogram_options": {
        "Type": "List",
        "Optional": true,
        "Description": "Options specific to Histogram charts",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "color_theme": {
              "Type": "String",
              "Optional": true,
              "Description": "Base color theme to use for the graph."
            }
          }
        }
      },
      "legend_fields_to_hide": {
        "Type": "Set",
        "Optional": true,
        "Description": "List of properties that shouldn't be displayed in the chart legend (i.e. dimension names)",
        "ConflictsWith": [
          "legend_options_fields"
        ],
        "Deprecated": "Please use legend_options_fields",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "legend_options_fields": {
        "Type": "List",
        "Optional": true,
        "Description": "List of property and enabled flags to control the order and presence of datatable labels in a chart.",
        "ConflictsWith": [
          "legend_fields_to_hide"
        ],
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "enabled": {
              "Type": "Bool",
              "Optional": true,
              "Description": "(true by default) Determines if this property is displayed in the data table.",
              "Default": {
                "Type": "bool",
                "Value": "true"
              }
            },
            "property": {
              "Type": "String",
              "Required": true,
              "Description": "The name of a property to hide or show in the data table."
            }
          }
        }
      },
      "max_delay": {
        "Type": "Int",
        "Optional": true,
        "Description": "How long (in seconds) to wait for late datapoints"
      },
      "minimum_resolution": {
        "Type": "Int",
        "Optional": true,
        "Description": "The minimum resolution (in seconds) to use for computing the underlying program"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the chart"
      },
      "on_chart_legend_dimension": {
        "Type": "String",
        "Optional": true,
        "Description": "Dimension to show in the on-chart legend. On-chart legend is off unless a dimension is specified. Allowed: 'metric', 'plot_label' and any dimension."
      },
      "plot_type": {
        "Type": "String",
        "Optional": true,
        "Description": "(LineChart by default) The default plot display style for the visualization. Must be \"LineChart\", \"AreaChart\", \"ColumnChart\", or \"Histogram\"",
        "Default": {
          "Type": "string",
          "Value": "LineChart"
        }
      },
      "program_text": {
        "Type": "String",
        "Required": true,
        "Description": "Signalflow program text for the chart. More info at \"https://developers.signalfx.com/docs/signalflow-overview\""
      },
      "show_data_markers": {
        "Type": "Bool",
        "Optional": true,
        "Description": "(false by default) Show markers (circles) for each datapoint used to draw line or area charts"
      },
      "show_event_lines": {
        "Type": "Bool",
        "Optional": true,
        "Description": "(false by default) Whether vertical highlight lines should be drawn in the visualizations at times when events occurred"
      },
      "stacked": {
        "Type": "Bool",
        "Optional": true,
        "Description": "(false by default) Whether area and bar charts in the visualization should be stacked",
        "Default": {
          "Type": "bool",
          "Value": "false"
        }
      },
      "start_time": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds since epoch to start the visualization",
        "ConflictsWith": [
          "time_range"
        ]
      },
      "tags": {
        "Type": "List",
        "Optional": true,
        "Description": "Tags associated with the chart",
        "Deprecated": "signalfx_time_chart.tags is being removed in the next release",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "time_range": {
        "Type": "Int",
        "Optional": true,
        "Description": "Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`",
        "ConflictsWith": [
          "start_time",
          "end_time"
        ]
      },
      "timezone": {
        "Type": "String",
        "Optional": true,
        "Description": "The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)",
        "Default": {
          "Type": "string",
          "Value": "UTC"
        }
      },
      "unit_prefix": {
        "Type": "String",
        "Optional": true,
        "Description": "(Metric by default) Must be \"Metric\" or \"Binary\"",
        "Default": {
          "Type": "string",
          "Value": "Metric"
        }
      },
      "url": {
        "Type": "String",
        "Description": "URL of the chart",
        "Computed": true
      },
      "viz_options": {
        "Type": "Set",
        "Optional": true,
        "Description": "Plot-level customization options, associated with a publish statement",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "axis": {
              "Type": "String",
              "Optional": true,
              "Description": "The Y-axis associated with values for this plot. Must be either \"right\" or \"left\". Defaults to \"left\".",
              "Default": {
                "Type": "string",
                "Value": "left"
              }
            },
            "color": {
              "Type": "String",
              "Optional": true,
              "Description": "Color to use"
            },
            "display_name": {
              "Type": "String",
              "Optional": true,
              "Description": "Specifies an alternate value for the Plot Name column of the Data Table associated with the chart."
            },
            "label": {
              "Type": "String",
              "Required": true,
              "Description": "The label used in the publish statement that displays the plot (metric time series data) you want to customize"
            },
            "plot_type": {
              "Type": "String",
              "Optional": true,
              "Description": "(Chart plot_type by default) The visualization style to use. Must be \"LineChart\", \"AreaChart\", \"ColumnChart\", or \"Histogram\""
            },
            "value_prefix": {
              "Type": "String",
              "Optional": true,
              "Description": "An arbitrary prefix to display with the value of this plot"
            },
            "value_suffix": {
              "Type": "String",
              "Optional": true,
              "Description": "An arbitrary suffix to display with the value of this plot"
            },
            "value_unit": {
              "Type": "String",
              "Optional": true,
              "Description": "A unit to attach to this plot. Units support automatic scaling (eg thousands of bytes will be displayed as kilobytes)"
            }
          }
        }
      }
    },
    "signalfx_victor_ops_integration": {
      "enabled": {
        "Type": "Bool",
        "Required": true,
        "Description": "Whether the integration is enabled or not"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the integration"
      },
      "post_url": {
        "Type": "String",
        "Optional": true,
        "Description": "Opsgenie API URL for integration"
      }
    },
    "signalfx_webhook_integration": {
      "enabled": {
        "Type": "Bool",
        "Required": true,
        "Description": "Whether the integration is enabled or not"
      },
      "headers": {
        "Type": "Set",
        "Optional": true,
        "Description": "HTTP headers to pass in the request",
        "IsBlock": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "header_key": {
              "Type": "String",
              "Required": true
            },
            "header_value": {
              "Type": "String",
              "Required": true
            }
          }
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the integration"
      },
      "shared_secret": {
        "Type": "String",
        "Optional": true
      },
      "url": {
        "Type": "String",
        "Optional": true,
        "Description": "Webhook URL"
      }
    }
  },
  "data-sources": {}
}